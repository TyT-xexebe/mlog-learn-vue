(function(){"use strict";var e={694:function(e,t,a){a.d(t,{n:function(){return Da}});var i=a(4055);const n={class:"mainContainer",ref:"container"};function o(e,t,a,o,l,r){const s=(0,i.g2)("nav-bar"),u=(0,i.g2)("router-view"),p=(0,i.g2)("footer-bar");return(0,i.uX)(),(0,i.CE)(i.FK,null,[(0,i.bF)(s),(0,i.Lk)("div",n,[(0,i.bF)(u)],512),(0,i.bF)(p)],64)}a(4114);var l=a(6798);const r=e=>((0,i.Qi)("data-v-604427f4"),e=e(),(0,i.jt)(),e),s={class:"nav-bar",ref:"nav"},u={class:"left navComponent"},p={class:"right navComponent",ref:"navRight"},c={class:"language-menu",ref:"languageMenu"},d=r((()=>(0,i.Lk)("div",{class:"menu-btn"},null,-1))),m=[d],b={id:"params1"},y=r((()=>(0,i.Lk)("span",null,"Input & Output",-1))),h=(0,i.eW)("read"),v=(0,i.eW)("write"),f=(0,i.eW)("draw"),g=(0,i.eW)("print"),k=r((()=>(0,i.Lk)("hr",null,null,-1))),w={id:"params2"},x=r((()=>(0,i.Lk)("span",null,"Block Control",-1))),L=(0,i.eW)("drawflush"),W=(0,i.eW)("printflush"),$=(0,i.eW)("getlink"),C=(0,i.eW)("control"),I=(0,i.eW)("radar"),_=(0,i.eW)("sensor"),T=r((()=>(0,i.Lk)("hr",null,null,-1))),F={id:"params3"},j=r((()=>(0,i.Lk)("span",null,"Operations",-1))),M=(0,i.eW)("set"),E=(0,i.eW)("operation"),S=(0,i.eW)("lookup"),q=(0,i.eW)("packcolor"),R=r((()=>(0,i.Lk)("hr",null,null,-1))),B={id:"params4"},O=r((()=>(0,i.Lk)("span",null,"Flow Control",-1))),A=(0,i.eW)("wait"),P=(0,i.eW)("stop"),D=(0,i.eW)("end"),N=(0,i.eW)("jump"),U=r((()=>(0,i.Lk)("hr",null,null,-1))),H={id:"params5"},X=r((()=>(0,i.Lk)("span",null,"Unit Control",-1))),z=(0,i.eW)("ubind"),K=(0,i.eW)("ucontrol"),Y=(0,i.eW)("uradar"),V=(0,i.eW)("ulocate"),G=r((()=>(0,i.Lk)("hr",null,null,-1))),J={id:"params6"},Q=r((()=>(0,i.Lk)("span",null,"World",-1))),Z=(0,i.eW)("get block"),ee=(0,i.eW)("set block"),te=(0,i.eW)("spawn unit"),ae=(0,i.eW)("apply status"),ie=(0,i.eW)("spawn wave"),ne=(0,i.eW)("set rule"),oe=(0,i.eW)("flush message"),le=(0,i.eW)("cutscene"),re=(0,i.eW)("effect"),se=(0,i.eW)("explosion"),ue=(0,i.eW)("set_rate"),pe=(0,i.eW)("fetch"),ce=(0,i.eW)("set flag"),de=(0,i.eW)("get flag"),me=(0,i.eW)("set prop");function be(e,t,a,n,o,r){const d=(0,i.g2)("my-button");return(0,i.uX)(),(0,i.CE)("div",s,[(0,i.Lk)("div",u,[(0,i.bF)(d,{class:(0,l.C4)(["underlined",{active:"/about"===e.$route.path}]),onClick:t[0]||(t[0]=t=>e.$router.push("/about"))},{default:(0,i.k6)((()=>[(0,i.eW)((0,l.v_)(e.$t("navbar.about")),1)])),_:1},8,["class"]),(0,i.bF)(d,{class:(0,l.C4)(["underlined",{active:"/basic"===e.$route.path}]),onClick:t[1]||(t[1]=t=>e.$router.push("/basic"))},{default:(0,i.k6)((()=>[(0,i.eW)((0,l.v_)(e.$t("navbar.basic")),1)])),_:1},8,["class"])]),(0,i.Lk)("div",p,[(0,i.bF)(d,{class:(0,l.C4)(["underlined commands",{active:"/commands"===e.$route.path}]),onClick:r.toggleCommands},{default:(0,i.k6)((()=>[(0,i.eW)((0,l.v_)(e.$t("navbar.commands")),1)])),_:1},8,["onClick","class"]),(0,i.bF)(d,{class:(0,l.C4)(["underlined",{active:"/examples"===e.$route.path}]),onClick:t[2]||(t[2]=t=>e.$router.push("/examples"))},{default:(0,i.k6)((()=>[(0,i.eW)((0,l.v_)(e.$t("navbar.codeExamples")),1)])),_:1},8,["class"]),(0,i.bF)(d,{class:(0,l.C4)(["underlined",{active:"/debugger"===e.$route.path}]),onClick:t[3]||(t[3]=t=>e.$router.push("/debugger"))},{default:(0,i.k6)((()=>[(0,i.eW)((0,l.v_)(e.$t("navbar.debugger")),1)])),_:1},8,["class"]),(0,i.bF)(d,{onClick:r.openLangMenu,class:"language"},{default:(0,i.k6)((()=>[(0,i.eW)((0,l.v_)(e.$t("navbar.language")),1)])),_:1},8,["onClick"]),(0,i.bF)(d,{onClick:t[4]||(t[4]=t=>e.$router.push("/login")),class:(0,l.C4)({active:"/login"===e.$route.path})},{default:(0,i.k6)((()=>[(0,i.eW)((0,l.v_)(e.$t("navbar.logIn")),1)])),_:1},8,["class"])],512),(0,i.Lk)("div",c,[(0,i.bF)(d,{onClick:t[5]||(t[5]=e=>(r.changeLanguage("en"),r.openLangMenu())),class:(0,l.C4)({active:"en"===e.$i18n.locale})},{default:(0,i.k6)((()=>[(0,i.eW)((0,l.v_)(e.$t("navbar.languages.english")),1)])),_:1},8,["class"]),(0,i.bF)(d,{onClick:t[6]||(t[6]=e=>(r.changeLanguage("ru"),r.openLangMenu())),class:(0,l.C4)({active:"ru"===e.$i18n.locale})},{default:(0,i.k6)((()=>[(0,i.eW)((0,l.v_)(e.$t("navbar.languages.russian")),1)])),_:1},8,["class"]),(0,i.bF)(d,{onClick:t[7]||(t[7]=e=>(r.changeLanguage("uk"),r.openLangMenu())),class:(0,l.C4)({active:"uk"===e.$i18n.locale})},{default:(0,i.k6)((()=>[(0,i.eW)((0,l.v_)(e.$t("navbar.languages.ukrainian")),1)])),_:1},8,["class"])],512),(0,i.Lk)("div",{class:"menu-btn-container",onClick:t[8]||(t[8]=(...e)=>r.openFullNav&&r.openFullNav(...e))},m),(0,i.Lk)("div",{class:(0,l.C4)(["commandList",{"show-commands":n.showCommands}]),ref:"commandsList"},[(0,i.Lk)("div",b,[y,(0,i.bF)(d,null,{default:(0,i.k6)((()=>[h])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[v])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[f])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[g])),_:1}),k]),(0,i.Lk)("div",w,[x,(0,i.bF)(d,null,{default:(0,i.k6)((()=>[L])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[W])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[$])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[C])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[I])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[_])),_:1}),T]),(0,i.Lk)("div",F,[j,(0,i.bF)(d,null,{default:(0,i.k6)((()=>[M])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[E])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[S])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[q])),_:1}),R]),(0,i.Lk)("div",B,[O,(0,i.bF)(d,null,{default:(0,i.k6)((()=>[A])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[P])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[D])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[N])),_:1}),U]),(0,i.Lk)("div",H,[X,(0,i.bF)(d,null,{default:(0,i.k6)((()=>[z])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[K])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[Y])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[V])),_:1}),G]),(0,i.Lk)("div",J,[Q,(0,i.bF)(d,null,{default:(0,i.k6)((()=>[Z])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[ee])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[te])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[ae])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[ie])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[ne])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[oe])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[le])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[re])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[se])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[ue])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[pe])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[ce])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[de])),_:1}),(0,i.bF)(d,null,{default:(0,i.k6)((()=>[me])),_:1})])],2)],512)}var ye=a(7732),he={name:"nav-bar",setup(){const e=(0,ye.KR)(!1),t=(0,ye.KR)(!1),a=(0,ye.KR)(!1),i=(0,ye.KR)(!1),n=(0,ye.KR)(!1),o=(0,ye.KR)(!1),l=(0,ye.KR)(!1);return document.addEventListener("click",(function(e){l.value.contains(e.target)||e.target.classList.contains("commands")||(t.value=!1)})),{showBar:e,showCommands:t,showLang:a,nav:i,navRight:n,languageMenu:o,commandsList:l}},watch:{showCommands(){this.openCommandsMenu()}},mounted(){this.openFullNav(),this.positionedLangMenu(),this.openLangMenu(),this.openCommandsMenu(),window.addEventListener("resize",(()=>{this.positionedLangMenu(),this.showLang=!1,this.openLangMenu(),window.innerWidth>800?this.showBar&&this.openFullNav():this.showBar||this.openFullNav()}));const e=this.nav.querySelectorAll("button");e.forEach((e=>{e.addEventListener("click",(e=>{this.reload(e)}))}));const t=this.nav.querySelectorAll(".navComponent button");t.forEach((e=>{e.addEventListener("click",(()=>window.scrollTo({top:0,left:0,behavior:"smooth"})))}))},methods:{changeLanguage(e){this.$i18n.locale=e},openFullNav(){window.innerWidth<=800?(this.showBar?(this.navRight.style.paddingTop=`${this.nav.getBoundingClientRect().height}px`,this.navRight.style.transform="translateY(0px)",this.navRight.style.opacity="1.0",this.showBar=!1):(this.navRight.style.paddingTop="0px",this.navRight.style.transform="translateY(-100px)",this.navRight.style.opacity="0",this.showBar=!0),this.navRight.style.display="flex"):(this.showBar=!1,this.navRight.style.transform="translateY(0px)",this.navRight.style.opacity="1.0",this.navRight.style.display="block",this.navRight.style.paddingTop="0px")},positionedLangMenu(){const e=this.navRight.querySelector(".language"),t=e.getBoundingClientRect();if(window.innerWidth<800)this.languageMenu.style.top="5.5vh",this.languageMenu.style.left=this.navRight.getBoundingClientRect().left-this.languageMenu.getBoundingClientRect().width+1+"px",this.languageMenu.style.width="fit-content";else if(this.languageMenu.style.top=t.bottom+"px",this.languageMenu.style.width=t.width,window.innerWidth<950)if("ru"===this.$i18n.locale||"uk"===this.$i18n.locale){const e=(this.languageMenu.getBoundingClientRect().width-t.width)/2;this.languageMenu.style.left=t.left-e+"px"}else this.languageMenu.style.left=t.left-10+"px";else if("ru"===this.$i18n.locale||"uk"===this.$i18n.locale){const e=(this.languageMenu.getBoundingClientRect().width-t.width)/2;this.languageMenu.style.left=t.left-e+"px"}else this.languageMenu.style.left=t.left-15-8+"px"},openLangMenu(){this.positionedLangMenu(),this.showLang?(this.languageMenu.style.transform="translateY(0px)",this.languageMenu.style.opacity="1.0",this.showLang=!1):(this.languageMenu.style.transform="translateY(-300px)",this.languageMenu.style.opacity="0",this.showLang=!0)},openCommandsMenu(){this.showCommands?(this.commandsList.style.transform="translateX(0)",this.commandsList.style.opacity="1.0"):(this.commandsList.style.transform="translateX(-300px)",this.commandsList.style.opacity="0")},toggleCommands(){this.showCommands=!this.showCommands},reload(e){const t=e.target;t.classList.contains("commands")?this.showCommands=!0:this.showCommands=!1}}},ve=a(5932);const fe=(0,ve.A)(he,[["render",be],["__scopeId","data-v-604427f4"]]);var ge=fe;const ke={class:"footer"},we={class:"footer-container"},xe={class:"left"},Le={class:"center"},We={class:"right"};function $e(e,t,a,n,o,r){const s=(0,i.g2)("my-link");return(0,i.uX)(),(0,i.CE)("div",ke,[(0,i.Lk)("div",we,[(0,i.Lk)("div",xe,[(0,i.Lk)("h4",null,(0,l.v_)(e.$t("footer.mlogLearnSite")),1)]),(0,i.Lk)("div",Le,[(0,i.Lk)("h4",null,(0,l.v_)(e.$t("footer.codeSpaceDebugger")),1),(0,i.bF)(s,null,{default:(0,i.k6)((()=>[(0,i.eW)((0,l.v_)(e.$t("footer.codesVault")),1)])),_:1}),(0,i.bF)(s,null,{default:(0,i.k6)((()=>[(0,i.eW)((0,l.v_)(e.$t("footer.privacyPolicy")),1)])),_:1})]),(0,i.Lk)("div",We,[(0,i.Lk)("h4",null,(0,l.v_)(e.$t("footer.contacts")),1),(0,i.bF)(s,null,{default:(0,i.k6)((()=>[(0,i.eW)((0,l.v_)(e.$t("footer.discord")),1)])),_:1}),(0,i.bF)(s,null,{default:(0,i.k6)((()=>[(0,i.eW)((0,l.v_)(e.$t("footer.telegram")),1)])),_:1}),(0,i.bF)(s,null,{default:(0,i.k6)((()=>[(0,i.eW)((0,l.v_)(e.$t("footer.email")),1)])),_:1})])])])}var Ce={};const Ie=(0,ve.A)(Ce,[["render",$e],["__scopeId","data-v-257f679e"]]);var _e=Ie,Te={components:{"nav-bar":ge,"footer-bar":_e}};const Fe=(0,ve.A)(Te,[["render",o]]);var je=Fe;const Me={class:"mainBtn"};function Ee(e,t,a,n,o,l){return(0,i.uX)(),(0,i.CE)("button",Me,[(0,i.RG)(e.$slots,"default",{},void 0,!0)])}var Se={name:"my-button"};const qe=(0,ve.A)(Se,[["render",Ee],["__scopeId","data-v-58bf5272"]]);var Re=qe;const Be={class:"myLink"};function Oe(e,t,a,n,o,l){return(0,i.uX)(),(0,i.CE)("a",Be,[(0,i.RG)(e.$slots,"default")])}var Ae={name:"my-link"};const Pe=(0,ve.A)(Ae,[["render",Oe]]);var De=Pe,Ne=[Re,De],Ue=a(1228),He=a(3229);const Xe={class:"container"},ze={class:"main"},Ke={class:"yellow"},Ye={class:"hr"},Ve={class:"title yellow"},Ge={class:"bolt yellow"},Je={class:"bolt yellow"},Qe={class:"bolt yellow"},Ze={class:"bolt yellow"},et={class:"hr"},tt={class:"title yellow"};function at(e,t){return(0,i.uX)(),(0,i.CE)("div",Xe,[(0,i.Lk)("div",ze,[(0,i.Lk)("h2",Ke,(0,l.v_)(e.$t("about.pageTitle")),1),(0,i.Lk)("h3",null,(0,l.v_)(e.$t("about.purpose")),1),(0,i.Lk)("span",Ye,[(0,i.Lk)("span",Ve,(0,l.v_)(e.$t("about.infoTitle")),1)]),(0,i.Lk)("h3",null,(0,l.v_)(e.$t("about.informationAvailable")),1),(0,i.Lk)("ul",null,[(0,i.Lk)("li",null,[(0,i.Lk)("span",Ge,(0,l.v_)(e.$t("about.basicConcepts.title")),1),(0,i.Lk)("p",null,(0,l.v_)(e.$t("about.basicConcepts.description")),1)]),(0,i.Lk)("li",null,[(0,i.Lk)("span",Je,(0,l.v_)(e.$t("about.commands.title")),1),(0,i.Lk)("p",null,(0,l.v_)(e.$t("about.commands.description")),1)]),(0,i.Lk)("li",null,[(0,i.Lk)("span",Qe,(0,l.v_)(e.$t("about.codeExamples.title")),1),(0,i.Lk)("p",null,(0,l.v_)(e.$t("about.codeExamples.description")),1)]),(0,i.Lk)("li",null,[(0,i.Lk)("span",Ze,(0,l.v_)(e.$t("about.debugger.title")),1),(0,i.Lk)("p",null,(0,l.v_)(e.$t("about.debugger.description")),1)])]),(0,i.Lk)("span",et,[(0,i.Lk)("span",tt,(0,l.v_)(e.$t("about.contribute.main")),1)]),(0,i.Lk)("h3",null,(0,l.v_)(e.$t("about.contribute.title")),1),(0,i.Lk)("p",null,(0,l.v_)(e.$t("about.contribute.contactUs")),1),(0,i.Lk)("p",null,(0,l.v_)(e.$t("about.appreciateParticipation")),1)])])}const it={},nt=(0,ve.A)(it,[["render",at],["__scopeId","data-v-4b11992c"]]);var ot=nt;const lt={class:"container"},rt={class:"main"},st={class:"yellow"},ut=(0,i.Lk)("br",null,null,-1),pt=(0,i.Lk)("br",null,null,-1),ct=(0,i.Lk)("br",null,null,-1),dt=(0,i.Lk)("br",null,null,-1),mt={class:"hr"},bt={class:"title yellow"},yt=["innerHTML"],ht=(0,i.eW)(": "),vt=["innerHTML"],ft=(0,i.Lk)("br",null,null,-1),gt={class:"hr"},kt={class:"title yellow"},wt=["innerHTML"],xt=(0,i.Lk)("br",null,null,-1),Lt={class:"bolt yellow"},Wt=(0,i.Lk)("h5",null,[(0,i.eW)(" jump 2 always 0 0"),(0,i.Lk)("br"),(0,i.eW)(" end"),(0,i.Lk)("br"),(0,i.eW)(' print "hello"'),(0,i.Lk)("br")],-1),$t={class:"bolt yellow"},Ct=(0,i.Lk)("h5",null,[(0,i.eW)(" jump label always 0 0"),(0,i.Lk)("br"),(0,i.eW)(" end"),(0,i.Lk)("br"),(0,i.eW)(" label:"),(0,i.Lk)("br"),(0,i.eW)(' print "hello"'),(0,i.Lk)("br")],-1),It={class:"hr"},_t={class:"title yellow"},Tt=["innerHTML"];function Ft(e,t,a,n,o,r){return(0,i.uX)(),(0,i.CE)("div",lt,[(0,i.Lk)("div",rt,[(0,i.Lk)("h2",st,(0,l.v_)(e.$t("basic.understandingLogic.title")),1),(0,i.Lk)("p",null,(0,l.v_)(e.$t("basic.understandingLogic.intro")),1),ut,(0,i.Lk)("p",null,(0,l.v_)(e.$t("basic.understandingLogic.processorDescription")),1),pt,(0,i.Lk)("p",null,(0,l.v_)(e.$t("basic.understandingLogic.processorUsage")),1),ct,(0,i.Lk)("p",null,(0,l.v_)(e.$t("basic.understandingLogic.connectingBlocks")),1),dt,(0,i.Lk)("span",mt,[(0,i.Lk)("span",bt,(0,l.v_)(e.$t("basic.understandingLogic.specialValuesTitle")),1)]),(0,i.Lk)("ul",null,[((0,i.uX)(!0),(0,i.CE)(i.FK,null,(0,i.pI)(this.$tm("basic.understandingLogic.specialValues"),(e=>((0,i.uX)(),(0,i.CE)("li",null,[(0,i.Lk)("strong",{class:"bolt yellow",innerHTML:r.decodeHTMLEntities(e.name)},null,8,yt),ht,(0,i.Lk)("span",{innerHTML:r.decodeHTMLEntities(e.description)},null,8,vt),ft])))),256))]),(0,i.Lk)("span",gt,[(0,i.Lk)("span",kt,(0,l.v_)(e.$t("basic.understandingLogic.basicProcessorInfoTitle")),1)]),(0,i.Lk)("ul",null,[((0,i.uX)(!0),(0,i.CE)(i.FK,null,(0,i.pI)(this.$tm("basic.understandingLogic.basicProcessorInfo"),(e=>((0,i.uX)(),(0,i.CE)("li",null,[(0,i.Lk)("span",{innerHTML:r.decodeHTMLEntities(e)},null,8,wt),xt])))),256))]),(0,i.Lk)("p",Lt,(0,l.v_)(e.$t("basic.understandingLogic.jumpLabelsTitle")),1),(0,i.Lk)("p",null,(0,l.v_)(e.$t("basic.understandingLogic.jumpLabelsIntro")),1),Wt,(0,i.Lk)("p",$t,(0,l.v_)(e.$t("basic.understandingLogic.jumpLabelMethodsTitle")),1),(0,i.Lk)("p",null,(0,l.v_)(e.$t("basic.understandingLogic.jumpMethods")),1),Ct,(0,i.Lk)("p",null,(0,l.v_)(e.$t("basic.understandingLogic.jumpLabelMethods")),1),(0,i.Lk)("span",It,[(0,i.Lk)("span",_t,(0,l.v_)(e.$t("basic.understandingLogic.otherLogicBlocksTitle")),1)]),(0,i.Lk)("p",{innerHTML:r.decodeHTMLEntities(e.$t("basic.understandingLogic.otherLogicBlocksIntro"))},null,8,Tt)])])}var jt={methods:{decodeHTMLEntities:function(e){var t=document.createElement("textarea");return t.innerHTML=e,t.value}}};const Mt=(0,ve.A)(jt,[["render",Ft]]);var Et=Mt;let St,qt,Rt,Bt;const Ot=(e,t,a)=>{if(e){St=[];let i=a.split("</div>");i.forEach((e=>{St.push(e.replace(/<\/?div>|<br>/g,""))})),Bt=t,qt=e.split(/\s+/),Rt=St.map((e=>e.split(/\s+/)))}else St=[],qt=[],Rt=[]},At=e=>({answer:!1,issue:e}),Pt=()=>({answer:!0,issue:!1}),Dt=(e,t,a)=>{const i=/^-?\d+(\.\d+)?$/;return i.test(t)?/^0[0-9]+/.test(t)&&!/^0[xX][0-9a-fA-F]+$/.test(t)?At(`${t} is not a valid number`):(t=Number(t),isNaN(t)?At(`${t} is not a number`):(Da(typeof t),a||Number.isInteger(t)?t<e[0]?At(`the ${t} is less then min range (${e[0]} : ${e[1]})`):t>e[1]?At(`the ${t} is greater then max range (${e[0]} : ${e[1]})`):Pt():At(`the ${t} is float`))):At(`${t} is not a valid decimal number`)},Nt={variable:{range:/^[a-zA-Z][a-zA-Z0-9]*$/,type:"regexp",rangeS:"variable"},boolean:{range:e=>/^0[0-9]+/.test(e)&&!/^0[xX][0-9a-fA-F]+$/.test(e)?At(`${e} is not a valid number`):0==e||1==e||"true"==e||"false"==e?Pt():At(`${e} must be Boolean`),type:"func",rangeS:"boolean [ 1 , 0 , true, false ]"},int:{range:e=>{const t=[-1/0,1/0];return Dt(t,e,!1)},type:"func",rangeS:"int [ -Infinity - Infinity ]"},positiveInt:{range:e=>{const t=[0,1/0];return Dt(t,e,!1)},type:"func",rangeS:"positive int [ 0 - Infinity ]"},float:{range:e=>/^0[0-9]+/.test(e)&&!/^0[xX][0-9a-fA-F]+$/.test(e)?At(`${e} is not a valid number`):(e=Number(e),isNaN(e)?At(`${e} is not a number`):Number.isInteger(e)?At(`the ${e} is not a float`):Pt()),type:"func",rangeS:"float [ -Infinity.0 - Infinity.0 ]"},rotate3:{range:e=>{const t=[0,3];return Dt(t,e,!1)},type:"func",rangeS:"ratate 3 [ 0 - 3 ]"},rotate360:{range:e=>{const t=[0,360];return Dt(t,e,!1)},type:"func",rangeS:"rotate 360 [ 0 - 360 ]"},colorScheme255:{range:e=>{const t=[0,255];return Dt(t,e,!1)},type:"func",rangeS:"color scheme 255 [ 0 - 255 ]"},colorScheme1:{range:e=>{const t=[0,1];return Dt(t,e,!1)},type:"func",rangeS:"color scheme 1 [ 0 - 1 ]"},hex:{range:e=>{if(!e.startsWith("0x"))return At(`${e} is not a HEX`);if(e.length>16)return At(`${e} is too big`);let t=parseInt(e,16);return t>=0&&t<=9007199254740991?Pt():At(`${e} is too big`)},type:"func",rangeS:"HEX [ 0x0 - 0x1FFFFFFFFFFFFF ]"},blocks:["$#$at","conveyor","juction","sorter","router","distributor","gate","driver","source","void","duo","scatter","scorch","hail","wave","lancer","arc","parallax","swarmer","salvo","segment","tsunami","fuse","ripple","cyclone","foreshadow","spectre","meltdown","drill","extractor","cultivator","pump","conduit","continer","tank","generator","tower","node","diode","battery","panel","reactor","wall","door","thruster","huge","gigantic","press","smelter","kiln","compressator","weaver","mixer","melter","separator","disassembler","purvelizer","centrifuge","incinerator","factory","reconstructor","@oint","turret","mender","projector","dome","vault","unloader","mine","processor","message","display","cell","bank","switch","duct","bridge","loader","breach","diffuse","sublimate","titan","disperse","afflict","lustre","scathe","smite","milign","crusher","bore","chamber","crusible","furnace","electrolyzer","redirector","concentrator","heater","synthesizer","fabricator","refabricator","assembler","module","decontructor","constructor","unloader","@ucleus","foundation","citadel","acropolis","bastion","shard","canvas"],liquids:["$#$default","@water","@slag","@oil","@cryofluid","@neoplasm","@arkycite","@gallium","@ozone","@hydrogen","@nitrogen","@cyanogen"],items:["$#$default","@copper","@lead","@metaglass","@graphite","@sand","@coal","@titanium","@thorium","@scrap","@silicon","@plastanium","@phase-fabric","@surge-alloy","@spore-pod","@blast-compound","@pyratite","@beryllium","@tungsten","@oxide","@carbide","@fissile-matter","@dormant-cyst"],units:["$#$default","@dagger","@mace","@fortress","@scepter","@reign","@nova","@pulsar","@quasar","@vela","@corvus","@crawler","@atrax","@spiroct","@arkyid","@toxopid","@flare","@horizon","@zenith","@antumbra","@eclipse","@mono","@poly","@mega","@quad","@oct","@risso","@minke","@bryde","@sei","@omura","@retusa","@oxynoe","@cyerce","@aegires","@navanax","@alpha","@beta","@gamma","@stell","@locus","@precept","@vanquish","@conquer","@merui","@cleroi","@anthicus","@anthicus-missile","@tecta","@collaris","@elude","@avert","@obviate","@quell","@quell-missile","@disrupt","@disrupt-missile","@renale","@latum","@evoke","@incite","@emanate","@block","@manifold","@assembly-drone","@scathe-missile","@turret-unit-build-tower","@unit"],sensor:["$#$default","@totalItems","@firstItem","@totalLiquds","@totalPower","@itemCapacity","@liquidCapacity","@powerNetStored","@powerNetCapacity","@powerNetIn","@powerNetOut","@ammo","@ammoCapacity","@health","@maxHealth","@heat","@efficiency","@progress","@timescale","@rotation","@x","@y","@shootX","@shootY","@size","@dead","@range","@shooting","@boosting","@mineX","@mineY","@mining","@speed","@team","@type","@flag","@controlled","@controller","@name","shield","@payLoadCount","@payLoadType","@enabled","@config","@color"],locateSort:["$#$default","core","storage","generator","turret","factory","repair","battery","reactor"],oreSort:["$#$default","@copper","@lead","@sand","@coal","@titanium","@beryllium"],buildings:["$#$default","@graphite-press","@multi-press","@silicon-smelter","@silicon-crucible","@kiln","@plastanium-compressor","@phase-weaver","@surge-smelter","@cryofluid-mixer","@pyratite-mixer","@blast-mixer","@melter","@separator","@disassembler","@spore-press","@pulverizer","@coal-centrifuge","@incinerator","@silicon-arc-furnace","@electrolyzer","@atmospheric-concentrator","@oxidation-chamber","@electric-heater","@slag-heater","@phase-heater","@heat-redirector","@heat-router","@slag-incinerator","@carbide-crucible","@slag-centrifuge","@surge-crucible","@cyanogen-synthesizer","@phase-synthesizer","@heat-reactor","@copper-wall","@copper-wall-large","@titanium-wall","@titanium-wall-large","@plastanium-wall","@plastanium-wall-large","@thorium-wall","@thorium-wall-large","@phase-wall","@phase-wall-large","@surge-wall","@surge-wall-large","@door","@door-large","@scrap-wall","@scrap-wall-large","@scrap-wall-huge","@scrap-wall-gigantic","@thruster","@beryllium-wall","@beryllium-wall-large","@tungsten-wall","@tungsten-wall-large","@blast-door","@reinforced-surge-wall","@reinforced-surge-wall-large","@carbide-wall","@carbide-wall-large","@shielded-wall","@mender","@mend-projector","@overdrive-projector","@overdrive-dome","@force-projector","@shock-mine","@radar","@build-tower","@regen-projector","@shockwave-tower","@shield-projector","@large-shield-projector","@conveyor","@titanium-conveyor","@plastanium-conveyor","@armored-conveyor","@junction","@bridge-conveyor","@phase-conveyor","@sorter","@inverted-sorter","@router","@distributor","@overflow-gate","@underflow-gate","@mass-driver","@duct","@armored-duct","@duct-router","@overflow-duct","@underflow-duct","@duct-bridge","@duct-unloader","@surge-conveyor","@surge-router","@unit-cargo-loader","@unit-cargo-unload-point","@mechanical-pump","@rotary-pump","@impulse-pump","@conduit","@pulse-conduit","@plated-conduit","@liquid-router","@liquid-container","@liquid-tank","@liquid-junction","@bridge-conduit","@phase-conduit","@reinforced-pump","@reinforced-conduit","@reinforced-liquid-junction","@reinforced-bridge-conduit","@reinforced-liquid-router","@reinforced-liquid-container","@reinforced-liquid-tank","@power-node","@power-node-large","@surge-tower","@diode","@battery","@battery-large","@combustion-generator","@thermal-generator","@steam-generator","@differential-generator","@rtg-generator","@solar-panel","@solar-panel-large","@thorium-reactor","@impact-reactor","@beam-node","@beam-tower","@beam-link","@turbine-condenser","@chemical-combustion-chamber","@pyrolysis-generator","@flux-reactor","@neoplasia-reactor","@mechanical-drill","@pneumatic-drill","@laser-drill","@blast-drill","@water-extractor","@cultivator","@oil-extractor","@vent-condenser","@cliff-crusher","@plasma-bore","@large-plasma-bore","@impact-drill","@eruption-drill","@core-shard","@core-foundation","@core-nucleus","@core-bastion","@core-citadel","@core-acropolis","@container","@vault","@unloader","@reinforced-container","@reinforced-vault","@duo","@scatter","@scorch","@hail","@wave","@lancer","@arc","@parallax","@swarmer","@salvo","@segment","@tsunami","@fuse","@ripple","@cyclone","@foreshadow","@spectre","@meltdown","@breach","@diffuse","@sublimate","@titan","@disperse","@afflict","@lustre","@scathe","@smite","@malign","@ground-factory","@air-factory","@naval-factory","@additive-reconstructor","@multiplicative-reconstructor","@exponential-reconstructor","@tetrative-reconstructor","@repair-point","@repair-turret","@tank-fabricator","@ship-fabricator","@mech-fabricator","@tank-refabricator","@mech-refabricator","@ship-refabricator","@prime-refabricator","@tank-assembler","@ship-assembler","@mech-assembler","@basic-assembler-module","@unit-repair-tower","@payload-conveyor","@payload-router","@reinforced-payload-conveyor","@reinforced-payload-router","@payload-mass-driver","@large-payload-mass-driver","@small-deconstructor","@deconstructor","@constructor","@large-constructor","@payload-loader","@payload-unloader","@power-source","@power-void","@item-source","@item-void","@liquid-source","@liquid-void","@payload-source","@payload-void","@heat-source","@illuminator","@legacy-mech-pad","@legacy-unit-factory","@legacy-unit-factory-air","@legacy-unit-factory-ground","@command-center","@launch-pad","@interplanetary-accelerator","@message","@switch","@micro-processor","@logic-processor","@hyper-processor","@memory-cell","@memory-bank","@logic-display","@large-logic-display","@canvas","@reinforced-message","@world-processor","@world-cell","@world-message"],blocksFloors:["$#$default","@air","@spawn","@cliff","@build1","@build2","@build3","@build4","@build5","@build6","@build7","@build8","@build9","@build10","@build11","@build12","@build13","@build14","@build15","@build16","@deep-water","@shallow-water","@tainted-water","@deep-tainted-water","@darksand-tainted-water","@sand-water","@darksand-water","@tar","@pooled-cryofluid","@molten-slag","@space","@empty","@stone","@crater-stone","@char","@basalt","@hotrock","@magmarock","@sand-floor","@darksand","@dirt","@mud","@dacite","@rhyolite","@rhyolite-crater","@rough-rhyolite","@regolith","@yellow-stone","@carbon-stone","@ferric-stone","@ferric-craters","@beryllic-stone","@crystalline-stone","@crystal-floor","@yellow-stone-plates","@red-stone","@dense-red-stone","@red-ice","@arkycite-floor","@arkyic-stone","@rhyolite-vent","@carbon-vent","@arkyic-vent","@yellow-stone-vent","@red-stone-vent","@crystalline-vent","@redmat","@bluemat","@grass","@salt","@snow","@ice","@ice-snow","@shale","@moss","@core-zone","@spore-moss","@stone-wall","@spore-wall","@dirt-wall","@dacite-wall","@ice-wall","@snow-wall","@dune-wall","@regolith-wall","@yellow-stone-wall","@rhyolite-wall","@carbon-wall","@ferric-stone-wall","@beryllic-stone-wall","@arkyic-wall","@crystalline-stone-wall","@red-ice-wall","@red-stone-wall","@red-diamond-wall","@sand-wall","@salt-wall","@shrubs","@shale-wall","@spore-pine","@snow-pine","@pine","@white-tree-dead","@white-tree","@spore-cluster","@redweed","@pur-bush","@yellowcoral","@boulder","@snow-boulder","@shale-boulder","@sand-boulder","@dacite-boulder","@basalt-boulder","@carbon-boulder","@ferric-boulder","@beryllic-boulder","@yellow-stone-boulder","@arkyic-boulder","@crystal-cluster","@vibrant-crystal-cluster","@crystal-blocks","@crystal-orbs","@crystalline-boulder","@red-ice-boulder","@rhyolite-boulder","@red-stone-boulder","@metal-floor","@metal-floor-damaged","@metal-floor-2","@metal-floor-3","@metal-floor-4","@metal-floor-5","@dark-panel-1","@dark-panel-2","@dark-panel-3","@dark-panel-4","@dark-panel-5","@dark-panel-6","@dark-metal","@pebbles","@tendrils","@ore-copper","@ore-lead","@ore-scrap","@ore-coal","@ore-titanium","@ore-thorium","@ore-beryllium","@ore-tungsten","@ore-crystal-thorium","@ore-wall-thorium","@ore-wall-beryllium","@graphitic-wall","@ore-wall-tungsten"],radarUnit:["$#$default","any","enemy","ally","player","attacker","flying","boss","ground"],radarSort:["$#$default","distance","health","shield","armor","maxHealth"],config:["$#$at","sorter","gate","source","factory","fabricator","constructor","unloader","router"],turret:["$#$at","duo","scatter","scorch","hail","wave","lancer","arc","parallax","swarmer","salvo","segment","tsunami","fuse","ripple","cyclone","foreshadow","spectre","meltdown","breach","diffuse","sublimate","titan","disperse","afflict","lustre","scathe","smite","malign"],configObj:["$#$obj",{blocks:["sorter","gate","unloader","router"],type:["@copper","@lead","@metaglass","@graphite","@sand","@coal","@titanium","@thorium","@scrap","@silicon","@plastanium","@phase-fabric","@surge-alloy","@spore-pod","@blast-compound","@pyratite","@beryllium","@tungsten","@oxide","@carbide","@fissile-matter","@dormant-cyst"]},{blocks:["source"],type:["@copper","@lead","@metaglass","@graphite","@sand","@coal","@titanium","@thorium","@scrap","@silicon","@plastanium","@phase-fabric","@surge-alloy","@spore-pod","@blast-compound","@pyratite","@beryllium","@tungsten","@oxide","@carbide","@fissile-matter","@dormant-cyst","@water","@slag","@oil","@cryofluid","@neoplasm","@arkycite","@gallium","@ozone","@hydrogen","@nitrogen","@cyanogen","@dagger","@mace","@fortress","@scepter","@reign","@nova","@pulsar","@quasar","@vela","@corvus","@crawler","@atrax","@spiroct","@arkyid","@toxopid","@flare","@horizon","@zenith","@antumbra","@eclipse","@mono","@poly","@mega","@quad","@oct","@risso","@minke","@bryde","@sei","@omura","@retusa","@oxynoe","@cyerce","@aegires","@navanax","@alpha","@beta","@gamma","@stell","@locus","@precept","@vanquish","@conquer","@merui","@cleroi","@anthicus","@anthicus-missile","@tecta","@collaris","@elude","@avert","@obviate","@quell","@disrupt","@renale","@latum","@evoke","@incite","@emanate"]},{blocks:["factory"],type:["@dagger","@nova","@crawler","@flare","@mono","@risso","@retusa"]},{blocks:["fabricator"],type:["@elude","@merui","@stell"]},{blocks:["constructor"],type:["@multi-press","@silicon-crucible","@surge-smelter","@disassembler","@pulverizer","@silicon-arc-furnace","@electrolyzer","@atmospheric-concentrator","@oxidation-chamber","@slag-heater","@heat-redirector","@heat-router","@slag-incinerator","@carbide-crucible","@slag-centrifuge","@surge-crucible","@cyanogen-synthesizer","@phase-synthesizer","@scrap-wall-huge","@scrap-wall-gigantic","@thruster","@overdrive-dome","@force-projector","@solar-panel-large","@thorium-reactor","@impact-reactor","@beam-node","@turbine-condenser","@chemical-combustion-chamber","@pyrolysis-generator","@laser-drill","@blast-drill","@oil-extractor","@vent-condenser","@large-plasma-bore","@impact-drill","@vault","@reinforced-container","@reinforced-liquid-container","@reinforced-vault","@tsunami","@fuse","@ripple","@cyclone","@foreshadow","@spectre","@meltdown","@breach","@diffuse","@sublimate","@titan","@disperse","@afflict","@lustre","@scathe","@ground-factory","@air-factory","@naval-factory","@additive-reconstructor","@tank-fabricator","@ship-fabricator","@mech-fabricator","@tank-refabricator","@mech-refabricator","@ship-refabricator","@payload-conveyor","@payload-router","@reinforced-payload-conveyor","@reinforced-payload-router","@payload-mass-driver","deconstructor","@constructor","@payload-loader","@payload-unloader","@logic-display","@hyper-processor","@beam-node","@carbide-wall-large","@reinforced-surge-wall-large","@beryllium-wall-large","@tungsten-wall-large","@build-tower","@regen-projector","@shockwave-tower","@mass-driver","@unit-cargo-loader","@impulse-pump","@liquid-tank","@reinforced-liquid-tank","@battery-large","@differential-generator"]}],drawImage:[],special:["@e","@pi","@time","@tick","@minute","@waveNumber","@waveTime","@degToRad","@radToDeg","@links","@ctrlProcessor","@ctrlPlayer","@ctrlCommand","@unitCount","@blockCount","@liquidCount","@itemCuont","@this","@thisx","@thisy","@unit","@counter","@maph","@mapw","@air","@ipt","@server"],teams:["@crux","@sharded","@derelict","@malis","@blue","@green"]},Ut=(e,t,a)=>({name:e,background:t,border:a}),Ht=[Ut("Input & Output","#A08B8A","#685B5A"),Ut("Block Control","#D3816B","#8B5548"),Ut("Operations","#877BAD","#62597D"),Ut("Operations","#877BAD","#62597D"),Ut("Flow Control","#6BB3B2","#558C8B"),Ut("Unit Control","#C7B59D","#A69784"),Ut("World","#6B84D4","#4E6099")],Xt={write:{name:["Write","write"],select:!1,type:"Input & Output",commands:[["{1} to {2} at {3}",{input:Nt.variable,type:"input"},{input:[Nt.variable,Nt.blocks],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"}]]},read:{name:["Read","read"],select:!1,type:"Input & Output",commands:[["{1} = {2} at {3}",{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.blocks],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"}]]},draw:{name:["Draw","draw"],select:!0,type:"Input & Output",commands:[["clear r {1} g {2} b {3}",{subcommand:"clear",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.colorScheme255],type:"input"},{input:[Nt.variable,Nt.colorScheme255],type:"input"},{input:[Nt.variable,Nt.colorScheme255],type:"input"}],["color r {1} g {2} b {3} a {4}",{subcommand:"color",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.colorScheme1],type:"input"},{input:[Nt.variable,Nt.colorScheme1],type:"input"},{input:[Nt.variable,Nt.colorScheme1],type:"input"},{input:[Nt.variable,Nt.colorScheme1],type:"input"}],["col color {1}",{subcommand:"col",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.hex],type:"input"}],["stroke {1}",{subcommand:"stroke",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt],type:"input"}],["stroke {1}",{subcommand:"stroke",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt],type:"input"}],["line x {1} y {2} x2 {3} y2 {4}",{subcommand:"line",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"}],["rect x {1} y {2} width {3} height {4}",{subcommand:"rect",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"}],["lineRect x {1} y {2} width {3} height {4}",{subcommand:"lineRect",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"}],["poly x {1} y {2} sides {3} radius {4} rotation {5}",{subcommand:"poly",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.rotate360],type:"input"}],["linePoly x {1} y {2} sides {3} radius {4} rotation {5}",{subcommand:"linePoly",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.rotate360],type:"input"}],["triangle x {1} y {2} x2 {3} y2 {4} x3 {5} y3 {6}",{subcommand:"triangle",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"}],["image x {1} y {2} image {3} size {4} rotation {5}",{subcommand:"image",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.drawImage],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.rotate360],type:"input"}]]},print:{name:["Print","print"],select:!1,type:"Input & Output",commands:[["{1}",{input:[Nt.variable],type:"input"}]]},printFlush:{name:["Print Flush","printflush"],select:!1,type:"Block Control",commands:[["to {1}",{input:[Nt.variable,Nt.blocks],type:"input"}]]},drawFlush:{name:["Draw Flush","drawflush"],select:!1,type:"Block Control",commands:[["to {1}",{input:[Nt.variable,Nt.blocks],type:"input"}]]},getLink:{name:["Get Link","getlink"],select:!1,type:"Block Control",commands:[["{1} = link# {2}",{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.positiveInt],type:"input"}]]},control:{name:["Control","control"],select:!0,type:"Block Control",commands:[["set enabled of {1} to {2}",{subcommand:"enabled",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.blocks],type:"input"},{input:[Nt.variable,Nt.boolean],type:"input"}],["set shoot of {1} x {2} y {3} shoot {4}",{subcommand:"shoot",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.turret],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"},{input:[Nt.variable,Nt.boolean],type:"input"}],["set shootp of {1} unit {2} shoot {3}",{subcommand:"shootp",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.turret],type:"input"},{input:[Nt.variable],type:"input"},{input:[Nt.variable,Nt.boolean],type:"input"}],["set config of {1} to {2}",{subcommand:"config",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.config],type:"input"},{input:[Nt.configObj],type:"input"}],["set color of {1} to {2}",{subcommand:"color",type:"setable",canWrite:!1},{input:[Nt.variable],type:"input"},{input:[Nt.variable,Nt.hex],type:"input"}]]},radar:{name:["Radar","radar"],select:!1,type:"Block Control",commands:[["from {1} target {2} and {3} and {4} order {5} sort {6} output {7}",{input:[Nt.turret,Nt.variable],type:"input"},{input:[Nt.radarUnit],type:"input"},{input:[Nt.radarUnit],type:"input"},{input:[Nt.radarUnit],type:"input"},{input:[Nt.boolean,Nt.variable],type:"input"},{input:[Nt.radarSort],type:"input"},{input:[Nt.variable],type:"output"}]]},sensor:{name:["Sensor","sensor"],select:!1,type:"Block Control",commands:[["{1} = {2} in {3}",{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.blocks,Nt.units],type:"input"},{input:[Nt.sensor,Nt.items,Nt.liquids],type:"input"}]]},set:{name:["Set","set"],select:!1,type:"Operations",commands:[["{1} to {2}",{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.blocks,Nt.items,Nt.liquids,Nt.units,Nt.buildings,Nt.special,Nt.teams],type:"input"}]]},operation:{name:["Operation","op"],select:!0,type:"Operations",commands:[["{1} = {2} + {3}",{subcommand:"add",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} - {3}",{subcommand:"sub",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} * {3}",{subcommand:"mul",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} / {3}",{subcommand:"div",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} // {3}",{subcommand:"idiv",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} % {3}",{subcommand:"mod",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} ^ {3}",{subcommand:"pow",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} == {3}",{subcommand:"equal",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} not {3}",{subcommand:"notEqual",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} and {3}",{subcommand:"land",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} < {3}",{subcommand:"lessThan",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} <= {3}",{subcommand:"lessThanEq",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} > {3}",{subcommand:"greaterThan",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} >= {3}",{subcommand:"greaterThanEq",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} === {3}",{subcommand:"strictEqual",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} << {3}",{subcommand:"shl",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} >> {3}",{subcommand:"shr",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} or {3}",{subcommand:"or",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} b-and {3}",{subcommand:"and",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} xor {3}",{subcommand:"xor",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} flip {3}",{subcommand:"not",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} max {3}",{subcommand:"max",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} min {3}",{subcommand:"min",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} angle {3}",{subcommand:"angle",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} angle diff {3}",{subcommand:"angleDiff",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} len {3}",{subcommand:"len",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} noise {3}",{subcommand:"noise",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} abs {3}",{subcommand:"abs",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} log {3}",{subcommand:"log",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} log10 {3}",{subcommand:"log10",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} floor {3}",{subcommand:"floor",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} ceil {3}",{subcommand:"ceil",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} sqrt {3}",{subcommand:"sqrt",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} rand {3}",{subcommand:"rand",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} sin {3}",{subcommand:"sin",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} cos {3}",{subcommand:"cos",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} tan {3}",{subcommand:"tan",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} asin {3}",{subcommand:"asin",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} acos {3}",{subcommand:"acos",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}],["{1} = {2} atan {3}",{subcommand:"atan",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.hex,Nt.special],type:"input"}]]},lookup:{name:["Lookup","lookup"],select:!0,type:"Operations",commands:[["{1} = lookup item # {2}",{subcommand:"item",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.positiveInt],type:"input"}],["{1} = lookup unit # {2}",{subcommand:"unit",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.positiveInt],type:"input"}],["{1} = lookup liquid # {2}",{subcommand:"liquid",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.positiveInt],type:"input"}],["{1} = lookup block # {2}",{subcommand:"block",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.positiveInt],type:"input"}]]},packcolor:{name:["PackColor","packcolor"],select:!1,type:"Operations",commands:[["{1} = pack {2} {3} {4} {5}",{input:[Nt.variable],type:"output"},{input:[Nt.variable,Nt.boolean],type:"input"},{input:[Nt.variable,Nt.boolean],type:"input"},{input:[Nt.variable,Nt.boolean],type:"input"},{input:[Nt.variable,Nt.boolean],type:"input"}]]},wait:{name:["Wait","wait"],select:!1,type:"Flow Control",commands:[["{1} sec",{input:[Nt.variable,Nt.positiveInt,Nt.float,Nt.special],type:"input"}]]},stop:{name:["Stop","stop"],select:"end",type:"Flow Control"},end:{name:["End","end"],select:"end",type:"Flow Control"},jump:{name:["Jump","jump"],select:!0,type:"Flow Control",commands:[["if {1} == {2}",{input:[Nt.variable,Nt.positiveInt],type:"input"},{subcommand:"equal",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"}],["if {1} not {2}",{input:[Nt.variable,Nt.positiveInt],type:"input"},{subcommand:"notEqual",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"}],["if {1} < {2}",{input:[Nt.variable,Nt.positiveInt],type:"input"},{subcommand:"lessThan",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"}],["if {1} <= {2}",{input:[Nt.variable,Nt.positiveInt],type:"input"},{subcommand:"lessThanEq",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"}],["if {1} > {2}",{input:[Nt.variable,Nt.positiveInt],type:"input"},{subcommand:"greaterThan",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"}],["if {1} >= {2}",{input:[Nt.variable,Nt.positiveInt],type:"input"},{subcommand:"greaterThanEq",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"}],["if {1} === {2}",{input:[Nt.variable,Nt.positiveInt],type:"input"},{subcommand:"strictEqual",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"}],["if always",{input:[Nt.variable,Nt.positiveInt],type:"input"},{subcommand:"always",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"},{input:[Nt.variable,Nt.int,Nt.float,Nt.special,Nt.teams,Nt.hex,Nt.boolean,Nt.blocks,Nt.items,Nt.liquids,Nt.units],type:"input"}]]},ubind:{name:["Unit Bind","ubind"],select:!1,type:"Unit Control",commands:[["{1}",{input:[Nt.units],type:"input"}]]},ucontrol:{name:["Unit Control","ucontrol"],select:!0,type:"Unit Control",commands:[["idle",{subcommand:"idle",type:"setable",canWrite:!1}],["stop",{subcommand:"stop",type:"setable",canWrite:!1}],["move x {1} y {2}",{subcommand:"move",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt,Nt.float,Nt.special],type:"input"},{input:[Nt.variable,Nt.positiveInt,Nt.float,Nt.special],type:"input"}],["approach x {1} y {2} radius {3}",{subcommand:"approach",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt,Nt.float,Nt.special],type:"input"},{input:[Nt.variable,Nt.positiveInt,Nt.float,Nt.special],type:"input"},{input:[Nt.variable,Nt.positiveInt,Nt.float,Nt.special],type:"input"}],["pathfind x {1} y {2}",{subcommand:"pathfind",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt,Nt.float,Nt.special],type:"input"},{input:[Nt.variable,Nt.positiveInt,Nt.float,Nt.special],type:"input"}],["autoPathfind",{subcommand:"AutoPathfind",type:"setable",canWrite:!1}],["boost enable {1}",{subcommand:"boost",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.boolean,Nt.special],type:"input"}],["target x {1} y {2} shoot {3}",{subcommand:"target",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt,Nt.float,Nt.special],type:"input"},{input:[Nt.variable,Nt.positiveInt,Nt.float,Nt.special],type:"input"},{input:[Nt.variable,Nt.boolean,Nt.special],type:"input"}],["targetp unit {1} shoot {2}",{subcommand:"targetp",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.special],type:"input"},{input:[Nt.variable,Nt.boolean,Nt.special],type:"input"}],["itemDrop to {1} amount {2}",{subcommand:"itemDrop",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.blocks,"@air"],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"}],["itemTake from {1} item {2} amount {3}",{subcommand:"itemTake",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.blocks],type:"input"},{input:[Nt.variable,Nt.items],type:"input"},{input:[Nt.variable,Nt.positiveInt],type:"input"}],["payDrop",{subcommand:"payDrop",type:"setable",canWrite:!1}],["payTake takeUnits {1}",{subcommand:"payTake",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.units],type:"input"}],["payEnter",{subcommand:"payEnter",type:"setable",canWrite:!1}],["mine x {1} y {2}",{subcommand:"mine",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt,Nt.float,Nt.special],type:"input"},{input:[Nt.variable,Nt.positiveInt,Nt.float,Nt.special],type:"input"}],["flag value {1}",{subcommand:"flag",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt,Nt.special],type:"input"}],["build x {1} y {2} block {3} rotation {4} config {5}",{subcommand:"build",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt,Nt.special],type:"input"},{input:[Nt.variable,Nt.positiveInt,Nt.special],type:"input"},{input:[Nt.variable,Nt.blocks],type:"input"},{input:[Nt.variable,Nt.rotate3],type:"input"},{input:[Nt.variable,Nt.configObj],type:"input"}],["getBlock x {1} y {2} type {3} bilding {4} floor {5}",{subcommand:"getBlock",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt,Nt.special],type:"input"},{input:[Nt.variable,Nt.positiveInt,Nt.special],type:"input"},{input:[Nt.variable],type:"output"},{input:[Nt.variable],type:"output"},{input:[Nt.variable],type:"output"}],["within x {1} y {2} radius {3} result {4}",{subcommand:"within",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.positiveInt,Nt.special],type:"input"},{input:[Nt.variable,Nt.positiveInt,Nt.special],type:"input"},{input:[Nt.variable,Nt.positiveInt,Nt.special],type:"input"},{input:[Nt.variable],type:"output"}],["unbind",{subcommand:"unbind",type:"setable",canWrite:!1}]]},uradar:{name:["Unit Radar","uradar"],select:!1,type:"Unit Control",commands:[["target {1} and {2} and {3} order {4} sort {5} output {6}",{input:[Nt.radarUnit],type:"input"},{input:[Nt.radarUnit],type:"input"},{input:[Nt.radarUnit],type:"input"},{input:[Nt.boolean,Nt.variable],type:"input"},{input:[Nt.radarSort],type:"input"},{input:[Nt.variable],type:"output"}]]},ulocate:{name:["Unit Locate","ulocate"],select:!0,type:"Unit Control",commands:[["find building group {1} enemy {2} outX {3} outY {4} found {5} building {6}",{subcommand:"building",type:"setable",canWrite:!1},{input:[Nt.locateSort],type:"input"},{input:[Nt.variable,Nt.boolean],type:"input"},{input:[Nt.variable],type:"output"},{input:[Nt.variable],type:"output"},{input:[Nt.variable],type:"output"},{input:[Nt.variable],type:"output"}],["find ore ore {1} outX {2} outY {3} found {4}",{subcommand:"ore",type:"setable",canWrite:!1},{input:[Nt.variable,Nt.oreSort],type:"input"},{input:[Nt.variable],type:"output"},{input:[Nt.variable],type:"output"},{input:[Nt.variable],type:"output"}],["find spawn outX {1} outY {2} found {3} building {4}",{subcommand:"spawn",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable],type:"output"},{input:[Nt.variable],type:"output"},{input:[Nt.variable],type:"output"}],["find damaged outX {1} outY {2} found {3} building {4}",{subcommand:"damaged",type:"setable",canWrite:!1},{input:[Nt.variable],type:"output"},{input:[Nt.variable],type:"output"},{input:[Nt.variable],type:"output"},{input:[Nt.variable],type:"output"}]]}};for(const Na in Xt)Ht.forEach((e=>{e.name==Xt[Na].type&&(Xt[Na].pallete=e)}));var zt={commands:Xt};let Kt=[];const Yt=()=>{let e={};return Kt.forEach((t=>{if(t.line in e){let a=`${t.text} | line ${t.line} word ${t.word} | error <span class="red">${t.err}</span>\n`;e[t.line].push(a)}else{e[t.line]=[];let a=`${t.text} | line ${t.line} word ${t.word} | error <span class="red">${t.err}</span>\n`;e[t.line].push(a)}})),e},Vt=(e,t,a,i)=>{""!=i&&(void 0!=i?Kt.push({text:e,line:t,word:a,err:i}):Kt.push({text:"Global Error",line:t,word:a,err:i}))},Gt=()=>{Kt=[]};let Jt=[];const Qt=(e,t)=>{const a={};return 0==e.length?"no label":(e.forEach((([e])=>{const i=t.filter((([t])=>e===t));i.length>0&&(a[e]=a[e]||[],a[e].push(...i))})),Jt=a,a)};let Zt=[],ea=[],ta=[];const aa=zt.commands,ia={input:"yellow",output:"green",error:"red",default:"default"},na=(e,t)=>{Zt.push(`<span class="${e}">${t}</span>`)},oa=(e,t,a="null",i=!1)=>{const n=Object.entries(aa);let o,l=n.find((([t,{name:a}])=>a[1]===Rt[e][0]));o=0==i?l[1].commands[0][t].type:i[t].type,na("null"===a?ia[o]:ia[a],Rt[e][t])},la=(e,t,a,i=!1)=>{const n=[];for(const l of e)if(Array.isArray(l)){const[e,...o]=l;if("$#$default"===e){if(o.includes(Rt[t][a]))return void oa(t,a,"null",i);n.push(["not in array of variables",t,a,Rt[t][a]])}else if("$#$at"===e){const e=o.map((e=>new RegExp(`^${e}[1-9]\\d*$`)));if(e.some((e=>e.test(Rt[t][a]))))return void oa(t,a,"null",i);n.push(["not in array of variables",t,a,Rt[t][a]])}else if("$#$obj"===e){const e=Rt[t][a-1],l=e.match(/^.*(\d+)$/),r=e.replace(/(\d+)$/,""),s=!!l&&("0"!==l[1]||"error");if("error"===s)n.push(["Incorrect input",t,a,e]);else if(s){const e=o.find((e=>e.blocks?.includes(r)));if(e?.type.includes(Rt[t][a]))return void oa(t,a,"null",i);n.push(["not in array of variables",t,a,Rt[t][a]])}else{if(o.slice(1).some((e=>e.type.includes(Rt[t][a]))))return void oa(t,a,"null",i);n.push(["not in array of variables",t,a,Rt[t][a]])}}}else if("func"===l.type){const e=l.range(Rt[t][a]);if(e.answer)return void oa(t,a,"default",i);n.push([e.issue,t,a,Rt[t][a]])}else if("regexp"===l.type){if(l.range.test(Rt[t][a]))return void oa(t,a,"null",i);n.push(["return issue [ regexp ]",t,a,Rt[t][a]])}let o=!1;n.forEach((e=>{Vt(...e),o||(na("red",Rt[t][a]),o=!0)}))},ra=(e,t,a)=>{const i=Rt[a].length-1,n=Rt[a][1].startsWith("'")&&Rt[a][i].endsWith("'")||Rt[a][1].startsWith('"')&&Rt[a][i].endsWith('"');if(n)na("default",Rt[a][t]);else if(n)Vt("Incorrect input2",a,t,Rt[a][t]),na("red",Rt[a][t]);else if(t<2){let i=e[1].commands[0][t].input;la(i,a,t)}else Vt("Incorrect input1",a,t,Rt[a][t]),na("red",Rt[a][t])},sa=(e,t,a)=>{if("print"==e[0])ra(e,t,a);else if(void 0==e[1].commands[0][t])na("red",Rt[a][t]),Vt("Incorrect input",a,t,Rt[a][t]);else{let i=e[1].commands[0][t].input;la(i,a,t)}},ua=(e,t,a,i=!1)=>{let n=!1,o=!1;if(e[1].commands.forEach(((e,t)=>{e.forEach(((e,t)=>{0!=t&&"subcommand"in e&&(o=t)}))})),1==i)return o;const l=Rt[a][o];if(e[1].commands.forEach((e=>{e[o].subcommand==l&&(n=e)})),t!=o)if(0==n||null==n)na("red",Rt[a][t]),Vt("Incorrect input",a,t,Rt[a][t]);else if(void 0==n[t])na("red",Rt[a][t]),Vt("Incorrect input",a,t,Rt[a][t]);else{let e=n[t].input;la(e,a,t,n)}else 0==n||null==n?(Vt("Incorrect input subcommand",a,t,Rt[a][o]),na("red",Rt[a][o])):na("purple",Rt[a][o])},pa=e=>{Zt=[],ea=[],ta=[],Gt();for(let t=0;t<Rt.length;t++){if(void 0==Rt[t][0])continue;let e=!1;const a=Object.entries(aa);let i=a.find((([e,{name:a}])=>a[1]===Rt[t][0]));if(Rt[t][0].endsWith(":")){na("default",Rt[t][0]),ea.push([Rt[t][0].slice(0,-1),t,0]);for(let e=1;e<Rt[t].length;e++)na("red",Rt[t][e]),Vt("Incorrect input",t,e,Rt[t][e]);Zt.push("<br>")}else{0!==Rt[t].length&&i?(na("purple",Rt[t][0]),"jump"==Rt[t][0]&&void 0!=Rt[t][1]&&ta.push([Rt[t][1],t,1])):(Vt("This command not exist",t,0,Rt[t][0]),na("red",Rt[t][0]),e=!0);for(let a=1;a<Rt[t].length;a++)if(Rt[t][a])if(1!=e)switch(i[1].select){case!0:ua(i,a,t);break;case!1:sa(i,a,t);break;case"func":break;case"end":break}else na("red",Rt[t][a]),Vt("Incorrect input",t,a,Rt[t][a]);Zt.push("<br>")}}e.value=Zt.join(" "),Qt(ea,ta)},ca=zt.commands,da=e=>{if(void 0==e)return"Syntax Helper";const t=Rt.findIndex((t=>t.join(" ")===e));if(-1===t)return!1;const a=Rt[t],i=Object.entries(ca).find((([e,{name:t}])=>t[1]===a[0])),n="<br style='padding: 0 !important; margin: 0 !important;'>",o=Object.keys(ca).join(n);if(!i)return{output:"commands",syntax:[o]};const[l,r]=i,s=ua(i,1,e,!0),u=r.commands.map((e=>e[s]?.subcommand)).join(n);if(s){const e=r.commands.find((e=>e[s]?.subcommand===a[s]));if(!e){if("jump"==a[0]){const e=a[1]||"jumpLine";return{output:`${a[0]} jumpToLine subcommand`,syntax:["command",e,u]}}return{output:`${a[0]} subcommand`,syntax:["command",u]}}let t=`${a[0]}`;const i=["command"];return e.forEach(((e,a)=>{if(0!=a)if(a==s)t+=" subcommand",i.push(u);else{t+=` ${e.type}`;const a=e.input.map((e=>e.rangeS||Object.keys(Nt).find((t=>Nt[t]===e))||"ERROR")).join(n);i.push(a)}})),{output:t,syntax:i}}const p=r.commands[0];let c=`${a[0]}`;const d=["command"];return p.forEach(((e,t)=>{if(0===t)return;c+=` ${e.type}`;const a=e.input.map((e=>e.rangeS||Object.keys(Nt).find((t=>Nt[t]===e))||"ERROR")).join(n);d.push(a)})),{output:c,syntax:d}},ma=e=>{const t=da(e);return"string"==typeof t?[{item:t,tooltipContent:""}]:!(!t||!t.output)&&t.output.split(" ").map(((e,a)=>({item:e,tooltipContent:t.syntax[a]})))},ba=zt.commands,ya=e=>{if(void 0==e)return!1;const t=Rt.findIndex((t=>t.join(" ")===e[2]));if(-1===t)return!1;const a=Rt[t],i=Object.entries(ba).find((([e,{name:t}])=>t[1]===a[0]));if(!i)return Object.keys(ba);const[n,o]=i,l=ua(i,1,e[2],!0),r=e[1].split(" "),s=r[r.length-1],u=o.commands.map((e=>e[l]?.subcommand));if(l){const e=o.commands.find((e=>e[l]?.subcommand===a[l]));if(e){const t=e[r.length].input;return{word:s,ranges:t}}return u}Da(o),Da(r.length);const p=o.commands[0][r.length].input;return{word:s,ranges:p}},ha=e=>((0,i.Qi)("data-v-9a3a5d8c"),e=e(),(0,i.jt)(),e),va={class:"main"},fa={class:"container-syntax"},ga=(0,i.eW)("menu"),ka={class:"container-errors hotbarList"},wa=ha((()=>(0,i.Lk)("h2",null,"Errors",-1))),xa={class:"container-labels hotbarList"},La=ha((()=>(0,i.Lk)("h2",null,"Labels",-1))),Wa=ha((()=>(0,i.Lk)("div",{class:"container-settings hotbarList"},[(0,i.Lk)("h2",null,"Settings"),(0,i.Lk)("div",{class:"settings"})],-1))),$a={class:"container-ranges hotbarList"},Ca=ha((()=>(0,i.Lk)("h2",null,"Ranges",-1))),Ia={id:"code-editor"},_a={id:"autocompleteMenu"},Ta={id:"container"},Fa=["innerHTML"];var ja={setup(e){const t=(0,ye.KR)(null),a=(0,ye.KR)(null),n=(0,ye.KR)(null),o=(0,ye.KR)(null),r=(0,ye.KR)(null),s=(0,ye.KR)(null),u=(0,ye.KR)(null),p=(0,ye.KR)(null),c=(0,ye.KR)(null),d=(0,ye.KR)(""),m=(0,ye.KR)([]),b=(0,ye.KR)([]),y=()=>{const e=t.value,i=a.value;i.scrollTop=e.scrollTop,i.scrollLeft=e.scrollLeft},h=e=>{let t=0,a="",i="";const n=e.ownerDocument||e.document,o=n.defaultView||n.parentWindow;let l;if("undefined"!==typeof o.getSelection&&(l=o.getSelection(),l.rangeCount>0)){const n=l.getRangeAt(0),o=n.cloneRange();o.selectNodeContents(e),o.setEnd(n.endContainer,n.endOffset),t=o.endOffset,i=n.endContainer.textContent||"";const r=i.slice(0,t),s=r.split(/\s+/);a=s.join(" ")}return[t,a,i]},v=(e=!0)=>{const a=t.value||"";let i;i=ma(e?h(a)[2]:void 0),i&&(m.value=i)},f=()=>{const e=t.value||"";let a=ya(h(e));a&&(Array.isArray(a)?b.value=a.join(", "):"object"===typeof a&&a.ranges&&(b.value=a.ranges.join(", ")))},g=()=>{const e=t.value.innerText||"",i=t.value.innerHTML||"",n=a.value||"";Ot(e,n,i),pa(d),k(),w(),v(),f();const o=i.split("</div>").length-1;let l=[];for(let t=0;t<o;t++)l.push(`${t+1}`);p.value.innerText=l.join("\n")},k=()=>{const e=o.value||"";e.innerHTML="";const t=Yt();if(0==Object.keys(t).length){const t=document.createElement("h3");t.textContent="No errors yet!",e.appendChild(t)}else Object.keys(t).forEach((a=>{const i=t[a],n=document.createElement("details"),o=document.createElement("summary");o.textContent=`Line ${a}`,n.appendChild(o),i.forEach((e=>{const t=document.createElement("span");t.innerHTML=`${e}<br>`,n.appendChild(t)})),e.appendChild(n)}))},w=()=>{const e=r.value||"";if(e.innerHTML="",0==Object.keys(Jt).length){const t=document.createElement("h3");t.textContent="No labels yet!",e.appendChild(t)}else Object.keys(Jt).forEach((t=>{const a=Jt[t],i=document.createElement("details"),n=document.createElement("summary");n.textContent=`label  ' ${t} ''`,i.appendChild(n),a.forEach((e=>{const t=document.createElement("span");t.innerHTML=`label ' ${e[0]} ' used at line ${e[1]}<br>`,i.appendChild(t)})),e.appendChild(i)}))},x=()=>{const e=s.value||"";let t="";Object.keys(Nt).forEach((e=>{if(Array.isArray(Nt[e])){if("$#$default"==Nt[e][0]||"$#$at"==Nt[e][0])t+=`<details><summary class = "yellow">${e}</summary>${Nt[e].join(" ")}</details><hr>`;else if("$#$obj"==Nt[e][0]){t+=`<h3>${e}</h3>`;for(let a=1;Nt[e].length>a;a++){const i=Nt[e][a],n=Object.entries(i);t+=`<span class = "yellow">${n[0][0]}</span><span> : ${n[0][1].join(" ")}</span><br>`,t+=`<span class = "yellow">${n[1][0]}</span><span> : ${n[1][1].join(" ")}</span><br class = "brDown">`}t+="<hr>"}}else t+=`<h3 class = "yellow">${e}</h3><span>${Nt[e].rangeS}</span><hr>`})),e.innerHTML=t},L=()=>{const e=document.getElementsByClassName("container-syntax")[0],t=c.value||"",a=document.getElementsByClassName("autocompleteMenu")[0];a.style.display="none",0==n.value.style.zIndex?n.value.style.zIndex=2:n.value.style.zIndex=0,""==e.style.opacity&&(e.style.opacity=.7),.7==e.style.opacity?e.style.opacity=0:e.style.opacity=.7,""==t.style.display&&(t.style.display="none"),"block"==t.style.display?t.style.display="none":t.style.display="block"},W=e=>{Array.from(document.getElementsByClassName("hotbarList")).forEach((e=>{e.style.display="none"})),document.getElementsByClassName(e)[0].style.display="block"},$=e=>{const t=window.getSelection(),a=document.getElementById("autocompleteMenu");if(t.rangeCount>0){const e=t.getRangeAt(0),i=e.getBoundingClientRect();0==i.bottom&&0==i.left?a.style.display="none":(a.style.display="flex",a.style.top=i.bottom+window.scrollY+"px",a.style.left=i.left+window.scrollX+"px")}else a.style.display="none"};return(0,i.sV)((()=>{Array.from(document.getElementsByClassName("hotbarList")).forEach((e=>{e.style.display="none"})),v(!1),x(),w(),k(),$()})),(e,h)=>{const v=(0,i.g2)("my-button"),f=(0,i.gN)("tooltip");return(0,i.uX)(),(0,i.CE)(i.FK,null,[(0,i.Lk)("div",va,[(0,i.Lk)("div",fa,[((0,i.uX)(!0),(0,i.CE)(i.FK,null,(0,i.pI)(m.value,((e,t)=>(0,i.bo)(((0,i.uX)(),(0,i.CE)("span",{id:"syntaxHelper",ref_for:!0,ref_key:"syntaxHelper",ref:u,key:t,class:"tooltip-item"},[(0,i.eW)((0,l.v_)(e.item),1)])),[[f,{content:e.tooltipContent,placement:"bottom",target:["click","hover"],html:!0}]]))),128))]),(0,i.bF)(v,{onClick:L},{default:(0,i.k6)((()=>[ga])),_:1})]),(0,i.Lk)("div",{class:"hotbar",ref_key:"hotbar",ref:n},[(0,i.Lk)("div",{class:"selectDisplay",ref_key:"selectDisplay",ref:c},[(0,i.Lk)("button",{onClick:h[0]||(h[0]=e=>W("container-errors"))},"Errors"),(0,i.Lk)("button",{onClick:h[1]||(h[1]=e=>W("container-labels"))},"Labels"),(0,i.Lk)("button",{onClick:h[2]||(h[2]=e=>W("container-settings"))},"Settings"),(0,i.Lk)("button",{onClick:h[3]||(h[3]=e=>W("container-ranges"))},"Ranges")],512),(0,i.Lk)("div",ka,[wa,(0,i.Lk)("div",{class:"errors",ref_key:"errorList",ref:o},null,512)]),(0,i.Lk)("div",xa,[La,(0,i.Lk)("div",{class:"labels",ref_key:"labelList",ref:r},null,512)]),Wa,(0,i.Lk)("div",$a,[Ca,(0,i.Lk)("div",{class:"ranges",ref_key:"rangeList",ref:s},null,512)])],512),(0,i.Lk)("div",Ia,[(0,i.Lk)("div",{id:"line-numbers",ref_key:"lineNumbers",ref:p},null,512)]),(0,i.Lk)("div",_a,(0,l.v_)(b.value),1),(0,i.Lk)("div",Ta,[(0,i.Lk)("div",{id:"input",ref_key:"input",ref:t,contenteditable:"true",spellcheck:"false",onScroll:y,onInput:[g,h[4]||(h[4]=t=>e.$root.handleInput(e.event))],onKeyup:$,onBlur:$},null,544),(0,i.Lk)("div",{id:"output",ref_key:"output",ref:a,innerHTML:d.value},null,8,Fa)])],64)}}};const Ma=(0,ve.A)(ja,[["__scopeId","data-v-9a3a5d8c"]]);var Ea=Ma;const Sa=[{path:"/about",name:"About",component:ot},{path:"/basic",name:"Basic",component:Et},{path:"/debugger",name:"Debugger",component:Ea}],qa=(0,He.aE)({history:(0,He.Bt)("/mlog-learn-vue/"),routes:Sa});var Ra=qa,Ba=a(7153),Oa=a(3082);const Aa=(0,Ba.hU)({locale:"en",messages:{en:a(4174),ru:a(4600),uk:a(2749)}}),Pa=(0,Ue.Ef)(je);Ne.forEach((e=>{Pa.component(e.name,e)}));const Da=e=>console.log(e);Pa.use(Oa.Ay),Pa.use(Aa),Pa.use(Ra),Pa.mount("#app"),Pa.config.globalProperties.handleInput=e=>{console.log("handle input")}},4174:function(e){e.exports=JSON.parse('{"navbar":{"about":"About","basic":"Basic","commands":"Commands","codeExamples":"Code Examples","debugger":"Debugger","logIn":"Log In","language":"Language","languages":{"english":"English","russian":"Russian","ukrainian":"Ukrainian"}},"footer":{"mlogLearnSite":"M-Log Learn Site","codeSpaceDebugger":"CodeSpace (Debugger)","codesVault":"Codes Vault","privacyPolicy":"Privacy Policy","contacts":"Contacts","discord":"Discord","telegram":"Telegram","email":"Email"},"about":{"pageTitle":"About Site","purpose":"The website is created for the purpose of educating users M-log (Mindustry - logic). Here you will find extensive materials to help you learn M-log.","informationAvailable":"In particular, the following information is available on the website:","infoTitle":"Site Information","basicConcepts":{"title":"Basic concepts of M-log:","description":"We provide a detailed description of basic concepts to help you understand how everything works."},"commands":{"title":"Commands and their application:","description":"You will find information about various M-log commands and how to use them to achieve specific goals."},"codeExamples":{"title":"Code examples:","description":"We offer extensive code examples with detailed explanations to make it easier for you."},"debugger":{"title":"Debugger:","description":"Our debugger allows you to check and improve your code by detecting and fixing errors."},"contribute":{"main":"Suggest Your Feature","title":"In addition, we are always ready to welcome new ideas and suggestions from our users.","contactUs":"If you want to contribute to the development of our website, you can contact us."},"appreciateParticipation":"We appreciate your participation and are ready to consider any suggestions to improve our resource."},"basic":{"understandingLogic":{"title":"Understanding Logic in Mindustry","intro":"Here, we explain and show the most basic knowledge of logic that you need to know before delving into various commands and codes. Let\'s start by understanding what a processor is.","processorDescription":"In short, a processor is a block where you can write various commands, and the processor will execute them at a certain speed (each processor has its own code reading speed, but we won\'t focus on that now). The processor can perform various commands, such as controlling units, blocks, determining their location, or resources within them. In short, with a processor, you can do a lot and a lot of different things.","processorUsage":"In the processor, there are commands that take their values or, conversely, give them. There are also special values that you cannot see in the processor itself but can use. We\'ll talk more about this later. The processor reads the code line by line, starting with the 0th line. Also, you can copy the code from the processor, and there you will see its syntax, how different commands are written. You can write the code outside of the game and then simply paste it into the processor. It sounds easy, and it is, but you\'ll need to remember how to write a particular command, where you can use a certain value, and where you cannot.","connectingBlocks":"As you\'ve already understood, you can connect blocks to the processor. Each processor has its own radius, and you can connect the processor to any block within this radius. If a block is connected, then when you click on the processor, there will be a purple rhombus around that block. Also, if the processor controls a unit, there will be a yellow rhombus around it.","specialValuesTitle":"Special Values","specialValues":[{"name":"&commat;links","description":"displays the number of blocks connected to the processor."},{"name":"&commat;thisx","description":"displays the coordinates along the x-axis of this processor."},{"name":"&commat;thisy","description":"displays the coordinates along the y-axis of this processor."},{"name":"&commat;this","description":"displays the processor object."},{"name":"&commat;time","description":"displays the time in milliseconds, which began counting from the creation of the world. It does not count when the game is paused or you exit the world."},{"name":"&commat;tick","description":"is the same as &commat;time but in ticks."},{"name":"&commat;unit","description":"displays the unit object."},{"name":"&commat;counter","description":"displays the line of code that the processor is currently reading. You can set it manually."},{"name":"&commat;maph","description":"displays the map\'s height in tiles."},{"name":"&commat;mapw","description":"displays the map\'s width in tiles."},{"name":"&commat;ipt","description":"displays the processor\'s read speed in lines per tick."},{"name":"&commat;itemCount , &commat;liquidCount , &commat;unitCount , &commat;blockCount","description":"displays the number of objects of a particular type in the game (displays both types of serpulo and erekir)."},{"name":"&commat;air","description":"represents plain air. With it, you can eject resources from a unit into oblivion."},{"name":"&commat;server","description":"displays the server."},{"name":"&commat;crux , &commat;sharded , &commat;derelict , &commat;malis , &commat;blue , &commat;green","description":"represents command objects."},{"name":"&commat;pi","description":"represents the number π."},{"name":"&commat;e","description":"represents the number e."},{"name":"&commat;minute","description":"displays the time spent in the world, in minutes."},{"name":"&commat;waveNumber","description":"displays the wave number."},{"name":"&commat;waveTime","description":"displays the wave time."},{"name":"&commat;degToRad , &commat;radToDeg , &commat;ctrlProcessor , &commat;ctrlPlayer , &commat;ctrlCommands","description":"are rarely used."}],"basicProcessorInfoTitle":"Basic Processor Information","basicProcessorInfo":["You can change the behavior of the sorter by disabling it. The same applies to the inverted sorter.","Uradar scans radars from every unit of the same type.","You can add comments to the code using the # symbol, and if you paste code with comments, they will disappear.","With the introduction of logic, waiting periods and delays have been added for many operations:","Resource retrieval and unit lifting (2 seconds on v6, 1.5 seconds on v7);","Taking control away from units (10 seconds on v7);","Enabling blocks after disabling them with logic (only on v6, 6 seconds);","Interacting with doors (1 second manually, 1.33 seconds with logic).","You cannot control many blocks that you would consider controllable. For example, mass drivers, power nodes, accumulators, message blocks.","Logic may fail during map reload. We\'re not entirely sure what breaks and what doesn\'t.","Numbers can store only 52 bits of information (+1 sign bit) and represent 53 because there is an implicit 1 before the fractional mantissa (part of 3.1415926e+0 in floating-point numbers) due to how binary scientific notation works. This means that the largest \\"safe\\" number is 2^53 (9,007,199,254,740,992.0 or 0x20 00 00 00 00 00 00).","Ubind loads units in the order they are loaded in Groups.unit (an array that stores all units), in a loop. This is not accidental. However, saving reloads shuffle the order of units for unknown reasons.","The packcolor working principle is that it takes the color components and converts them into a floating-point number that the display can process. It will display as if it were 0, but divide it by 2^-1074 to get the color.","When the code reaches the last line, it starts executing from the first line again (or from the value of &commat;counter).","Each type of processor has a different processing speed (you can read this from &commat;ipt): microprocessor (2 ipt or 120 lines/second at 60 FPS), logic processor (480/second), hyper-processor (1500/second).","A memory cell can store a limited number of numbers (double or float32).","A memory cell stores 64 numbers, and a memory bank stores 512 numbers.","All commands and words are case-sensitive, for example, \'&commat;firstItem\', not \'&commat;firstitem\'. Most comparisons are coercive - \'true\' and \'false\' will also be equal to 1 and 0, respectively. Be careful, null will also be converted to 0. To avoid this, use strict comparison with ===."],"jumpLabelsTitle":"Using Jump Labels","jumpLabelsIntro":"If you\'re writing code outside of Mindustry (for example, on a website or in VScode), you can use jump labels (absolute) instead of jump numbers (relative) to avoid having to maintain jumps. Jump method:","jumpMethods":"With the jump method, you need to write the line number you want to jump to. In large codes, this can be problematic, and if you delete or add lines, you\'ll have to change the jump numbers.","jumpLabelMethodsTitle":"Jump Label Methods","jumpLabelMethods":"With the jump label method, you just need to specify the label name followed by a colon, and \'label:\' is not counted as a line. When you paste the code into the game, the label will disappear, and the jump will be set accordingly.","otherLogicBlocksTitle":"Other Logic Blocks","otherLogicBlocksIntro":"Now let\'s move on to other blocks in logic. A button, as you can understand, can be on or off. In the processor, you can check this using the sensor command and its &commat;enabled method. Displays can show different pixel patterns. The display has its size in pixels, and you can display images on it using the draw and drawflush display commands."}}}')},4600:function(e){e.exports=JSON.parse('{"navbar":{"about":"О нас","basic":"Основы","commands":"Команды","codeExamples":"Примеры кода","debugger":"Отладчик","language":"Язык","logIn":"Войти","languages":{"english":"Английский","russian":"Русский","ukrainian":"Украинский"}},"footer":{"mlogLearnSite":"M-Log Learn Site","codeSpaceDebugger":"CodeSpace (Отладчик)","codesVault":"Хранилище кодов","privacyPolicy":"Политика конфиденциальности","contacts":"Контакты","discord":"Discord","telegram":"Telegram","email":"Электронная почта"},"about":{"pageTitle":"О сайте","purpose":"Сайт создан с целью обучения пользователей M-log (Mindustry - logic). Здесь вы найдете обширные материалы, чтобы помочь вам овладеть M-log.","informationAvailable":"В частности, на сайте доступна следующая информация:","infoTitle":"Информация Сайта","basicConcepts":{"title":"Основные концепции M-log:","description":"Мы предоставляем подробное описание основных концепций, чтобы помочь вам понять, как все работает."},"commands":{"title":"Команды и их применение:","description":"Здесь вы найдете информацию о различных командах M-log и о том, как их использовать для достижения конкретных целей."},"codeExamples":{"title":"Примеры кода:","description":"Мы предлагаем обширные примеры кода с подробными пояснениями, чтобы вам было легче освоить M-log."},"debugger":{"title":"Отладчик:","description":"Наш отладчик позволяет вам проверять и улучшать свой код, выявляя и исправляя ошибки."},"contribute":{"main":"Предложите Свою Идею","title":"Кроме того, мы всегда готовы приветствовать новые идеи и предложения от наших пользователей.","contactUs":"Если вы хотите внести свой вклад в развитие нашего сайта, вы можете связаться с нами."},"appreciateParticipation":"Мы благодарим за ваше участие и готовы рассмотреть любые предложения по улучшению наших ресурсов."},"basic":{"understandingLogic":{"title":"Базовое понимание логики в Mindustry","intro":"Здесь мы объясним и покажем основные знания логики, которые вам нужно знать перед тем, как погружаться в изучение команд и написания кода. Давайте начнем с того - что такое процессор.","processorDescription":"Вкратце, процессор - это блок, в котором вы можете писать различные команды, и процессор выполнит их со своей определенной скоростью (каждый процессор имеет свою собственную скорость чтения кода, но сейчас мы не будем на это фокусироваться). Процессор может выполнять различные команды, такие как управление юнитами, блоками, определение их местоположения или ресурсов в них..","processorUsage":"В процессоре есть команды, которые принимают свои значения или, наоборот, выдают их. Также есть специальные значения, которые вы не видите в самом процессоре, но можете использовать. Мы поговорим об этом позже. Процессор читает код построчно, начиная с 0-й строки. Также вы можете скопировать код из процессора, и там увидите его синтаксис, как написаны различные команды. Вы можете писать код вне игры, а затем просто вставить его в процессор. Это звучит легко, и это так, но вам придется запомнить, как написать конкретную команду, где можно использовать определенное значение, а где нельзя.","connectingBlocks":"Вы можете подключать блоки к процессору. У каждого процессора есть свой радиус, и вы можете подключить процессор к любому блоку в пределах этого радиуса. Если блок подключен, то при нажатии на процессор вокруг этого блока появится фиолетовый ромб. Также, если процессор управляет юнитом, вокруг него появится желтый ромб.","specialValuesTitle":"Специальные значения","specialValues":[{"name":"&commat;links","description":"количество блоков, подключенных к процессору."},{"name":"&commat;thisx","description":"координаты по оси X этого процессора."},{"name":"&commat;thisy","description":"координаты по оси Y этого процессора."},{"name":"&commat;this","description":"объект процессора."},{"name":"&commat;time","description":" время в миллисекундах, начиная от создания мира. Оно не учитывается, когда игра на паузе или вы выходите из мира."},{"name":"&commat;tick","description":"то же самое, что и &commat;time, но в тиках."},{"name":"&commat;unit","description":"объект юнита."},{"name":"&commat;counter","description":"строка кода, которую процессор в данный момент читает. Вы можете устанавливать ее вручную."},{"name":"&commat;maph","description":"высота карты в тайлах."},{"name":"&commat;mapw","description":"ширина карты в тайлах."},{"name":"&commat;ipt","description":"скорость чтения процессора в строках за секунду."},{"name":"&commat;itemCount , &commat;liquidCount , &commat;unitCount , &commat;blockCount","description":"отображает количество объектов определенного типа в игре (от обоих планет serpulo и erekir)."},{"name":"&commat;air","description":"представляет собой воздух. С его помощью вы можете выкидывать ресурсы из юнита в никуда."},{"name":"&commat;server","description":"сервер."},{"name":"&commat;crux , &commat;sharded , &commat;derelict , &commat;malis , &commat;blue , &commat;green","description":"представляет объекты команд."},{"name":"&commat;pi","description":"представляет число π."},{"name":"&commat;e","description":"представляет число e."},{"name":"&commat;minute","description":"время, проведенное в мире, в минутах."},{"name":"&commat;waveNumber","description":" номер волны."},{"name":"&commat;waveTime","description":"время волны."},{"name":"&commat;degToRad , &commat;radToDeg , &commat;ctrlProcessor , &commat;ctrlPlayer , &commat;ctrlCommands","description":"редко используются."}],"basicProcessorInfoTitle":"Основная информация о процессоре","basicProcessorInfo":["Вы можете изменить поведение сортировщика, отключив его. То же самое относится к инвертированному сортировщику.","Uradar сканирует радары от каждого юнита того же типа.","Вы можете добавлять комментарии к коду с использованием символа #, и если вы вставите код с комментариями, они исчезнут.","С введением логики были добавлены временные интервалы и задержки для многих операций:","Получение ресурсов и подъем юнита (2 секунды на v6, 1,5 секунды на v7);","Забирание контроля у юнитов (10 секунд на v7);","Включение блоков после их отключения с логикой (только на v6, 6 секунд);","Взаимодействие с дверьми (1 секунда вручную, 1,33 секунды с логикой).","Вы не можете управлять многими блоками, которые вы считаете управляемыми. Например, катапульты, узлы, аккумуляторы.","Логика может не сработать во время перезагрузки карты. Мы не уверены, что ломается и что нет.","Числа могут хранить только 52 бита информации (+1 бит знака) и представлять 53 из-за того, что есть неявная 1 перед дробной мантиссой (часть 3,1415926e+0 в числах с плавающей запятой) из-за того, как работает бинарная научная нотация. Это означает, что самое большое \\"безопасное\\" число - 2^53 (9,007,199,254,740,992.0 или 0x20 00 00 00 00 00 00).","Ubind загружает юниты в том порядке, в котором они загружаются в Groups.unit (массив, который хранит все юниты), в цикле. Это не случайно. Однако сохраненные перезагрузки перемешивают порядок юнитов по неизвестным причинам.","Принцип работы packcolor заключается в том, что он берет компоненты цвета и преобразует их в число с плавающей точкой, которое можно обработать на экране. Он будет отображаться, как будто это 0, но разделите его на 2^-1074, чтобы получить цвет.","Когда код достигает последней строки, он начинает выполняться снова с первой строки (или со значения &commat;counter).","У каждого типа процессора своя скорость обработки (вы можете прочитать это из &commat;ipt): микропроцессор (2 ipt или 120 строк в секунду при 60 FPS), логический процессор (480 в секунду), гиперпроцессор (1500 в секунду).","Ячейка памяти может хранить ограниченное количество чисел (double или float32).","Ячейка памяти хранит 64 числа, а банк памяти хранит 512 чисел.","Все команды и слова чувствительны к регистру, например, \'&commat;firstItem\', а не \'&commat;firstitem\'. Большинство сравнений косвенные - \'true\' и \'false\' также будут равны 1 и 0 соответственно. Будьте осторожны, &commat;null также будет преобразован в 0. Чтобы избежать этого, используйте строгое сравнение с ===."],"jumpLabelsTitle":"Использование джампов","jumpLabelsIntro":"Если вы пишете код за пределами Mindustry (например, на веб-сайте или в VScode), вы можете использовать лабели (абсолютные) вместо джампов (относительных), чтобы избежать необходимости поддерживать номеры строк в джампах. Джампы:","jumpMethods":"В джампах вам нужно написать номер строки, на которую вы хотите перейти. В больших кодах это может быть проблематично, и если вы удаляете или добавляете строки, вам придется изменять номера строки тоже.","jumpLabelMethodsTitle":"Лабели","jumpLabelMethods":"В лабелях вам просто нужно указать имя метки, за которым следует двоеточие, (\'[name]:\' не считается строкой). Когда вы вставляете код в игру, метка исчезнет, и джамп будет установлен соответственно.","otherLogicBlocksTitle":"Другие блоки логики","otherLogicBlocksIntro":"Теперь перейдем к другим блокам в логике. Как вы можете понять, кнопка может быть включена или выключена. В процессоре вы можете проверить это, используя команду сенсора и его метод &commat;enabled. С помощью дисплеев вы можете что-то рисовать. У дисплея есть свой размер в пикселях, и вы можете отображать изображения на нем, используя команды draw и drawflush."}}}')},2749:function(e){e.exports=JSON.parse('{"navbar":{"about":"Про нас","basic":"Основи","commands":"Команди","codeExamples":"Приклади коду","debugger":"Відлагоджувач","language":"Мова","logIn":"Увійти","languages":{"english":"Англійська","russian":"Російська","ukrainian":"Українська"}},"footer":{"mlogLearnSite":"M-Log Learn Site","codeSpaceDebugger":"CodeSpace (Відлагоджувач)","codesVault":"Сховище кодів","privacyPolicy":"Політика конфіденційності","contacts":"Контакти","discord":"Discord","telegram":"Telegram","email":"Електронна пошта"},"about":{"pageTitle":"Про сайт","purpose":"Сайт створений з метою навчання користувачів M-log (Mindustry - logic). Тут ви знайдете обширний матеріал, який допоможе вам освоїти M-log.","informationAvailable":"Зокрема, на сайті доступна така інформація:","infoTitle":"Інформація Сайта","basicConcepts":{"title":"Основні концепції M-log:","description":"Ми надаємо докладний опис основних концепцій, щоб вам було легше зрозуміти, як все працює."},"commands":{"title":"Команди та їх застосування:","description":"Тут ви знайдете інформацію про різні команди M-log та те, як їх використовувати для досягнення конкретних цілей."},"codeExamples":{"title":"Приклади коду:","description":"Ми пропонуємо обширні приклади коду з докладними поясненнями, щоб вам було легше освоїти M-log."},"debugger":{"title":"Відлагоджувач:","description":"Наш відлагоджувач дозволяє вам перевіряти та вдосконалювати свій код, виявляючи та виправляючи помилки."},"contribute":{"main":"Запропонуйте Свою Ідею","title":"Крім того, ми завжди готові вітати нові ідеї та пропозиції від наших користувачів.","contactUs":"Якщо ви хочете внести свій внесок у розвиток нашого сайту, ви можете зв\'язатися з нами."},"appreciateParticipation":"Ми вдячні за вашу участь і готові розглянути будь-які пропозиції щодо удосконалення наших ресурсів."},"basic":{"understandingLogic":{"title":"Базове розуміння логіки в Mindustry","intro":"Тут ми пояснимо і покажемо основні знання логіки, які вам потрібно знати перед тим, як зануритися в вивчення команд та написання коду. Давайте почнемо з того - що таке процесор.","processorDescription":"Процесор - це блок, в якому ви можете писати різні команди, і процесор виконає їх із своєю швидкістю (кожен процесор має свою власну швидкість читання коду, але зараз ми на це не будемо фокусуватися). Процесор може виконувати різні команди, такі як управління юнітами, блоками, визначення їхнього місцезнаходження чи ресурсів у них та багато іншого","processorUsage":"В процесорі є команди, які приймають свої значення або, навпаки, видають їх. Також є спеціальні значення, які ви не бачите в самому процесорі, але можете використовувати. Ми поговоримо про це пізніше. Процесор читає код построчно, починаючи з 0-ї строки. Також ви можете скопіювати код з процесора, і там побачите його синтаксис, як написані різні команди. Ви можете писати код поза грою, а потім просто вставити його в процесор. Це звучить легко, але вам доведеться запам\'ятати, як написати конкретну команду, де можна використовувати певне значення, а де неможливо.","connectingBlocks":"Ви можете підключати блоки до процесора. У кожного процесора є свій радіус, і ви можете підключити процесор до будь-якого блока в межах цього радіуса. Якщо блок підключений, то при натисканні на процесор навколо цього блока з\'явиться фіолетовий ромб. Також, якщо процесор управляє юнітом, навколо нього з\'явиться жовтий ромб.","specialValuesTitle":"Спеціальні значення","specialValues":[{"name":"&commat;links","description":"кількість блоків, підключених до процесора."},{"name":"&commat;thisx","description":"координати по осі X цього процесора."},{"name":"&commat;thisy","description":"координати по осі Y цього процесора."},{"name":"&commat;this","description":"об\'єкт процесора."},{"name":"&commat;time","description":"час в мілісекундах, починаючи з створення світу. Він не враховується, коли гра на паузі або ви виходите з світу."},{"name":"&commat;tick","description":"теж саме, що й &commat;time, але в тіках."},{"name":"&commat;unit","description":"об\'єкт юніта."},{"name":"&commat;counter","description":"рядок коду, який процесор в даний момент читає. Ви можете встановлювати його вручну."},{"name":"&commat;maph","description":"висота карти в тайлах."},{"name":"&commat;mapw","description":"ширина карти в тайлах."},{"name":"&commat;ipt","description":"швидкість читання процесора в рядках за секунду."},{"name":"&commat;itemCount , &commat;liquidCount , &commat;unitCount , &commat;blockCount","description":"відображає кількість об\'єктів певного типу в грі (від обох планет serpulo і erekir)."},{"name":"&commat;air","description":"представляє собою повітря. З його допомогою ви можете викидати ресурси з юніта у нікуди."},{"name":"&commat;server","description":"сервер."},{"name":"&commat;crux , &commat;sharded , &commat;derelict , &commat;malis , &commat;blue , &commat;green","description":"представляє об\'єкти команд."},{"name":"&commat;pi","description":"представляє число π."},{"name":"&commat;e","description":"представляє число e."},{"name":"&commat;minute","description":"час, проведений у світі, в хвилинах."},{"name":"&commat;waveNumber","description":"номер хвилі."},{"name":"&commat;waveTime","description":"час хвилі."},{"name":"&commat;degToRad , &commat;radToDeg , &commat;ctrlProcessor , &commat;ctrlPlayer , &commat;ctrlCommands","description":"рідко використовуються."}],"basicProcessorInfoTitle":"Основна інформація про процесор","basicProcessorInfo":["Ви можете змінити поведінку сортувальника, відключивши його. Те саме стосується інвертованого сортувальника.","Uradar сканує радари від кожного юніта того ж типу.","Ви можете додавати коментарі до коду з використанням символу #, і якщо ви вставите код з коментарями, вони зникнуть.","З введенням логіки були додані часові інтервали та затримки для багатьох операцій:","Отримання ресурсів та підйому юніта (2 секунди на v6, 1,5 секунди на v7);","Забирання контролю від юнітів (10 секунд на v7);","Увімкнення блоків після їх вимкнення з логікою (лише на v6, 6 секунд);","Взаємодія з дверима (1 секунда вручну, 1,33 секунди з логікою).","Ви не можете керувати багатьма блоками, які ви вважаєте керованими. Наприклад, катапульти, вузли, акумулятори.","Логіка може не спрацьовувати під час перезавантаження карти. Ми не впевнені, що ламається і що ні.","Числа можуть зберігати лише 52 біти інформації (+1 біт знака) і представляти 53 через те, що є неявна 1 перед дробовою мантисою (частина 3,1415926e+0 в числах з плаваючою комою) через те, як працює бінарна наукова нотація. Це означає, що найбільше \\"безпечне\\" число - 2^53 (9,007,199,254,740,992.0 або 0x20 00 00 00 00 00 00).","Ubind завантажує юнітів в тому порядку, в якому вони завантажуються в Groups.unit (масив, який зберігає всі юніти), в циклі. Це не випадково. Однак збережені перезавантаження перемішують порядок юнітів з невідомих причин.","Принцип роботи packcolor полягає в тому, що він бере компоненти кольору та перетворює їх в число з плаваючою точкою, яке можна обробити на екрані. Воно буде відображатися, наче це 0, але поділіть його на 2^-1074, щоб отримати колір.","Коли код досягає останньої строки, він починає виконуватися знову з першої строки (або зі значенням &commat;counter).","У кожного типу процесора своя швидкість обробки (ви можете прочитати це з &commat;ipt): мікропроцесор (2 ipt або 120 строк в секунду при 60 FPS), логічний процесор (480 в секунду), гіперпроцесор (1500 в секунду).","Ячійка пам\'яті може зберігати обмежену кількість чисел (double або float32).","Ячійка пам\'яті зберігає 64 числа, а банк пам\'яті зберігає 512 чисел.","Всі команди та слова реєстру чутливі, наприклад, \'&commat;firstItem\', а не \'&commat;firstitem\'. Більшість порівнянь непрямі - \'true\' та \'false\' також будуть рівні 1 і 0 відповідно. Будьте обережні, &commat;null також буде перетворено в 0. Щоб уникнути цього, використовуйте строге порівняння з ===."],"jumpLabelsTitle":"Використання джампів","jumpLabelsIntro":"Якщо ви пишете код поза Mindustry (наприклад, на веб-сайті чи в VScode), ви можете використовувати лабелі (абсолютні) замість джампів (відносинних), щоб уникнути необхідності підтримувати номери строк в джампах. Джампи:","jumpMethods":"У джампах вам потрібно написати номер строки, на яку ви хочете перейти. У великих кодах це може бути проблематично, і якщо ви видаляєте чи додаєте строки, вам доведеться змінювати номери строки також.","jumpLabelMethodsTitle":"Лабелі","jumpLabelMethods":"В лабелях вам просто потрібно вказати ім\'я мітки, за яким слід двокрапка, (\'[name]:\' не вважається строкою). Коли ви вставляєте код в гру, мітка зникне, і джамп буде встановлено відповідно.","otherLogicBlocksTitle":"Інші блоки логіки","otherLogicBlocksIntro":"Тепер перейдемо до інших блоків в логіці. Як ви можете зрозуміти, кнопку можна увімкнути або вимкнути. У процесорі ви можете перевірити це, використовуючи команду сенсора та його метод &commat;enabled. З допомогою дисплеїв ви можете щось малювати. У дисплея є свій розмір в пікселях, і ви можете відображати зображення на ньому, використовуючи команди draw та drawflush."}}}')}},t={};function a(i){var n=t[i];if(void 0!==n)return n.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,a),o.exports}a.m=e,function(){var e=[];a.O=function(t,i,n,o){if(!i){var l=1/0;for(p=0;p<e.length;p++){i=e[p][0],n=e[p][1],o=e[p][2];for(var r=!0,s=0;s<i.length;s++)(!1&o||l>=o)&&Object.keys(a.O).every((function(e){return a.O[e](i[s])}))?i.splice(s--,1):(r=!1,o<l&&(l=o));if(r){e.splice(p--,1);var u=n();void 0!==u&&(t=u)}}return t}o=o||0;for(var p=e.length;p>0&&e[p-1][2]>o;p--)e[p]=e[p-1];e[p]=[i,n,o]}}(),function(){a.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return a.d(t,{a:t}),t}}(),function(){a.d=function(e,t){for(var i in t)a.o(t,i)&&!a.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})}}(),function(){a.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){var e={524:0};a.O.j=function(t){return 0===e[t]};var t=function(t,i){var n,o,l=i[0],r=i[1],s=i[2],u=0;if(l.some((function(t){return 0!==e[t]}))){for(n in r)a.o(r,n)&&(a.m[n]=r[n]);if(s)var p=s(a)}for(t&&t(i);u<l.length;u++)o=l[u],a.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return a.O(p)},i=self["webpackChunkvue_site"]=self["webpackChunkvue_site"]||[];i.forEach(t.bind(null,0)),i.push=t.bind(null,i.push.bind(i))}();var i=a.O(void 0,[504],(function(){return a(694)}));i=a.O(i)})();
//# sourceMappingURL=app.e261b527.js.map