{
  "navbar": {
    "about": "Про нас",
    "basic": "Основи",
    "commands": "Команди",
    "codeExamples": "Приклади коду",
    "debugger": "Відлагоджувач",
    "language": "Мова",
    "logIn": "Увійти",
    "languages": {
      "english": "Англійська",
      "russian": "Російська",
      "ukrainian": "Українська"
    }
  },
  "footer": {
    "mlogLearnSite": "M-Log Learn Site",
    "codeSpaceDebugger": "CodeSpace (Відлагоджувач)",
    "codesVault": "Сховище кодів",
    "privacyPolicy": "Політика конфіденційності",
    "contacts": "Контакти",
    "discord": "Discord",
    "telegram": "Telegram",
    "email": "Електронна пошта"
  },
  "about": {
    "pageTitle": "Про сайт",
    "purpose": "Сайт створений з метою навчання користувачів M-log (Mindustry - logic). Тут ви знайдете обширний матеріал, який допоможе вам освоїти M-log.",
    "informationAvailable": "Зокрема, на сайті доступна така інформація:",
    "infoTitle": "Інформація Сайта",
    "basicConcepts": {
      "title": "Основні концепції M-log:",
      "description": "Ми надаємо докладний опис основних концепцій, щоб вам було легше зрозуміти, як все працює."
    },
    "commands": {
      "title": "Команди та їх застосування:",
      "description": "Тут ви знайдете інформацію про різні команди M-log та те, як їх використовувати для досягнення конкретних цілей."
    },
    "codeExamples": {
      "title": "Приклади коду:",
      "description": "Ми пропонуємо обширні приклади коду з докладними поясненнями, щоб вам було легше освоїти M-log."
    },
    "debugger": {
      "title": "Відлагоджувач:",
      "description": "Наш відлагоджувач дозволяє вам перевіряти та вдосконалювати свій код, виявляючи та виправляючи помилки."
    },
    "contribute": {
      "main": "Запропонуйте Свою Ідею",
      "title": "Крім того, ми завжди готові вітати нові ідеї та пропозиції від наших користувачів.",
      "contactUs": "Якщо ви хочете внести свій внесок у розвиток нашого сайту, ви можете зв'язатися з нами."
    },
    "appreciateParticipation": "Ми вдячні за вашу участь і готові розглянути будь-які пропозиції щодо удосконалення наших ресурсів."
  },
  "basic": {
    "understandingLogic": {
      "title": "Базове розуміння логіки в Mindustry",
      "intro": "Тут ми пояснимо і покажемо основні знання логіки, які вам потрібно знати перед тим, як зануритися в вивчення команд та написання коду. Давайте почнемо з того - що таке процесор.",
      "processorDescription": "Процесор - це блок, в якому ви можете писати різні команди, і процесор виконає їх із своєю швидкістю (кожен процесор має свою власну швидкість читання коду, але зараз ми на це не будемо фокусуватися). Процесор може виконувати різні команди, такі як управління юнітами, блоками, визначення їхнього місцезнаходження чи ресурсів у них та багато іншого",
      "processorUsage": "В процесорі є команди, які приймають свої значення або, навпаки, видають їх. Також є спеціальні значення, які ви не бачите в самому процесорі, але можете використовувати. Ми поговоримо про це пізніше. Процесор читає код построчно, починаючи з 0-ї строки. Також ви можете скопіювати код з процесора, і там побачите його синтаксис, як написані різні команди. Ви можете писати код поза грою, а потім просто вставити його в процесор. Це звучить легко, але вам доведеться запам'ятати, як написати конкретну команду, де можна використовувати певне значення, а де неможливо.",
      "connectingBlocks": "Ви можете підключати блоки до процесора. У кожного процесора є свій радіус, і ви можете підключити процесор до будь-якого блока в межах цього радіуса. Якщо блок підключений, то при натисканні на процесор навколо цього блока з'явиться фіолетовий ромб. Також, якщо процесор управляє юнітом, навколо нього з'явиться жовтий ромб.",
      "specialValuesTitle": "Спеціальні значення",
      "specialValues": [
        {
          "name": "&commat;links",
          "description": "кількість блоків, підключених до процесора."
        },
        {
          "name": "&commat;thisx",
          "description": "координати по осі X цього процесора."
        },
        {
          "name": "&commat;thisy",
          "description": "координати по осі Y цього процесора."
        },
        { "name": "&commat;this", "description": "об'єкт процесора." },
        {
          "name": "&commat;time",
          "description": "час в мілісекундах, починаючи з створення світу. Він не враховується, коли гра на паузі або ви виходите з світу."
        },
        {
          "name": "&commat;tick",
          "description": "теж саме, що й &commat;time, але в тіках."
        },
        { "name": "&commat;unit", "description": "об'єкт юніта." },
        {
          "name": "&commat;counter",
          "description": "рядок коду, який процесор в даний момент читає. Ви можете встановлювати його вручну."
        },
        {
          "name": "&commat;maph",
          "description": "висота карти в тайлах."
        },
        {
          "name": "&commat;mapw",
          "description": "ширина карти в тайлах."
        },
        {
          "name": "&commat;ipt",
          "description": "швидкість читання процесора в рядках за секунду."
        },
        {
          "name": "&commat;itemCount , &commat;liquidCount , &commat;unitCount , &commat;blockCount",
          "description": "відображає кількість об'єктів певного типу в грі (від обох планет serpulo і erekir)."
        },
        {
          "name": "&commat;air",
          "description": "представляє собою повітря. З його допомогою ви можете викидати ресурси з юніта у нікуди."
        },
        { "name": "&commat;server", "description": "сервер." },
        {
          "name": "&commat;crux , &commat;sharded , &commat;derelict , &commat;malis , &commat;blue , &commat;green",
          "description": "представляє об'єкти команд."
        },
        { "name": "&commat;pi", "description": "представляє число π." },
        { "name": "&commat;e", "description": "представляє число e." },
        {
          "name": "&commat;minute",
          "description": "час, проведений у світі, в хвилинах."
        },
        { "name": "&commat;waveNumber", "description": "номер хвилі." },
        { "name": "&commat;waveTime", "description": "час хвилі." },
        {
          "name": "&commat;degToRad , &commat;radToDeg , &commat;ctrlProcessor , &commat;ctrlPlayer , &commat;ctrlCommands",
          "description": "рідко використовуються."
        }
      ],
      "basicProcessorInfoTitle": "Основна інформація про процесор",
      "basicProcessorInfo": [
        "Ви можете змінити поведінку сортувальника, відключивши його. Те саме стосується інвертованого сортувальника.",
        "Uradar сканує радари від кожного юніта того ж типу.",
        "Ви можете додавати коментарі до коду з використанням символу #, і якщо ви вставите код з коментарями, вони зникнуть.",
        "З введенням логіки були додані часові інтервали та затримки для багатьох операцій:",
        "Отримання ресурсів та підйому юніта (2 секунди на v6, 1,5 секунди на v7);",
        "Забирання контролю від юнітів (10 секунд на v7);",
        "Увімкнення блоків після їх вимкнення з логікою (лише на v6, 6 секунд);",
        "Взаємодія з дверима (1 секунда вручну, 1,33 секунди з логікою).",
        "Ви не можете керувати багатьма блоками, які ви вважаєте керованими. Наприклад, катапульти, вузли, акумулятори.",
        "Логіка може не спрацьовувати під час перезавантаження карти. Ми не впевнені, що ламається і що ні.",
        "Числа можуть зберігати лише 52 біти інформації (+1 біт знака) і представляти 53 через те, що є неявна 1 перед дробовою мантисою (частина 3,1415926e+0 в числах з плаваючою комою) через те, як працює бінарна наукова нотація. Це означає, що найбільше \"безпечне\" число - 2^53 (9,007,199,254,740,992.0 або 0x20 00 00 00 00 00 00).",
        "Ubind завантажує юнітів в тому порядку, в якому вони завантажуються в Groups.unit (масив, який зберігає всі юніти), в циклі. Це не випадково. Однак збережені перезавантаження перемішують порядок юнітів з невідомих причин.",
        "Принцип роботи packcolor полягає в тому, що він бере компоненти кольору та перетворює їх в число з плаваючою точкою, яке можна обробити на екрані. Воно буде відображатися, наче це 0, але поділіть його на 2^-1074, щоб отримати колір.",
        "Коли код досягає останньої строки, він починає виконуватися знову з першої строки (або зі значенням &commat;counter).",
        "У кожного типу процесора своя швидкість обробки (ви можете прочитати це з &commat;ipt): мікропроцесор (2 ipt або 120 строк в секунду при 60 FPS), логічний процесор (480 в секунду), гіперпроцесор (1500 в секунду).",
        "Ячійка пам'яті може зберігати обмежену кількість чисел (double або float32).",
        "Ячійка пам'яті зберігає 64 числа, а банк пам'яті зберігає 512 чисел.",
        "Всі команди та слова реєстру чутливі, наприклад, '&commat;firstItem', а не '&commat;firstitem'. Більшість порівнянь непрямі - 'true' та 'false' також будуть рівні 1 і 0 відповідно. Будьте обережні, &commat;null також буде перетворено в 0. Щоб уникнути цього, використовуйте строге порівняння з ===."
      ],
      "jumpLabelsTitle": "Використання джампів",
      "jumpLabelsIntro": "Якщо ви пишете код поза Mindustry (наприклад, на веб-сайті чи в VScode), ви можете використовувати лабелі (абсолютні) замість джампів (відносинних), щоб уникнути необхідності підтримувати номери строк в джампах. Джампи:",
      "jumpMethods": "У джампах вам потрібно написати номер строки, на яку ви хочете перейти. У великих кодах це може бути проблематично, і якщо ви видаляєте чи додаєте строки, вам доведеться змінювати номери строки також.",
      "jumpLabelMethodsTitle": "Лабелі",
      "jumpLabelMethods": "В лабелях вам просто потрібно вказати ім'я мітки, за яким слід двокрапка, ('[name]:' не вважається строкою). Коли ви вставляєте код в гру, мітка зникне, і джамп буде встановлено відповідно.",
      "otherLogicBlocksTitle": "Інші блоки логіки",
      "otherLogicBlocksIntro": "Тепер перейдемо до інших блоків в логіці. Як ви можете зрозуміти, кнопку можна увімкнути або вимкнути. У процесорі ви можете перевірити це, використовуючи команду сенсора та його метод &commat;enabled. З допомогою дисплеїв ви можете щось малювати. У дисплея є свій розмір в пікселях, і ви можете відображати зображення на ньому, використовуючи команди draw та drawflush."
    }
  }
}
