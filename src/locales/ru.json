{
  "navbar": {
    "about": "О нас",
    "basic": "Основы",
    "commands": "Команды",
    "codeExamples": "Примеры кода",
    "debugger": "Отладчик",
    "language": "Язык",
    "logIn": "Войти",
    "languages": {
      "english": "Английский",
      "russian": "Русский",
      "ukrainian": "Украинский"
    }
  },
  "footer": {
    "mlogLearnSite": "M-Log Learn Site",
    "codeSpaceDebugger": "CodeSpace (Отладчик)",
    "codesVault": "Хранилище кодов",
    "privacyPolicy": "Политика конфиденциальности",
    "contacts": "Контакты",
    "discord": "Discord",
    "telegram": "Telegram",
    "email": "Электронная почта"
  },
  "about": {
    "pageTitle": "О сайте",
    "purpose": "Сайт создан с целью обучения пользователей M-log (Mindustry - logic). Здесь вы найдете обширные материалы, чтобы помочь вам овладеть M-log.",
    "informationAvailable": "В частности, на сайте доступна следующая информация:",
    "infoTitle": "Информация Сайта",
    "basicConcepts": {
      "title": "Основные концепции M-log:",
      "description": "Мы предоставляем подробное описание основных концепций, чтобы помочь вам понять, как все работает."
    },
    "commands": {
      "title": "Команды и их применение:",
      "description": "Здесь вы найдете информацию о различных командах M-log и о том, как их использовать для достижения конкретных целей."
    },
    "codeExamples": {
      "title": "Примеры кода:",
      "description": "Мы предлагаем обширные примеры кода с подробными пояснениями, чтобы вам было легче освоить M-log."
    },
    "debugger": {
      "title": "Отладчик:",
      "description": "Наш отладчик позволяет вам проверять и улучшать свой код, выявляя и исправляя ошибки."
    },
    "contribute": {
      "main": "Предложите Свою Идею",
      "title": "Кроме того, мы всегда готовы приветствовать новые идеи и предложения от наших пользователей.",
      "contactUs": "Если вы хотите внести свой вклад в развитие нашего сайта, вы можете связаться с нами."
    },
    "appreciateParticipation": "Мы благодарим за ваше участие и готовы рассмотреть любые предложения по улучшению наших ресурсов."
  },
  "basic": {
    "understandingLogic": {
        "title": "Базовое понимание логики в Mindustry",
        "intro": "Здесь мы объясним и покажем основные знания логики, которые вам нужно знать перед тем, как погружаться в изучение команд и написания кода. Давайте начнем с того - что такое процессор.",
        "processorDescription": "Вкратце, процессор - это блок, в котором вы можете писать различные команды, и процессор выполнит их со своей определенной скоростью (каждый процессор имеет свою собственную скорость чтения кода, но сейчас мы не будем на это фокусироваться). Процессор может выполнять различные команды, такие как управление юнитами, блоками, определение их местоположения или ресурсов в них..",
        "processorUsage": "В процессоре есть команды, которые принимают свои значения или, наоборот, выдают их. Также есть специальные значения, которые вы не видите в самом процессоре, но можете использовать. Мы поговорим об этом позже. Процессор читает код построчно, начиная с 0-й строки. Также вы можете скопировать код из процессора, и там увидите его синтаксис, как написаны различные команды. Вы можете писать код вне игры, а затем просто вставить его в процессор. Это звучит легко, и это так, но вам придется запомнить, как написать конкретную команду, где можно использовать определенное значение, а где нельзя.",
        "connectingBlocks": "Вы можете подключать блоки к процессору. У каждого процессора есть свой радиус, и вы можете подключить процессор к любому блоку в пределах этого радиуса. Если блок подключен, то при нажатии на процессор вокруг этого блока появится фиолетовый ромб. Также, если процессор управляет юнитом, вокруг него появится желтый ромб.",
        "specialValuesTitle": "Специальные значения",
        "specialValues": [
            {
                "name": "&commat;links",
                "description": "количество блоков, подключенных к процессору."
            },
            {
                "name": "&commat;thisx",
                "description": "координаты по оси X этого процессора."
            },
            {
                "name": "&commat;thisy",
                "description": "координаты по оси Y этого процессора."
            },
            { "name": "&commat;this", "description": "объект процессора." },
            {
                "name": "&commat;time",
                "description": " время в миллисекундах, начиная от создания мира. Оно не учитывается, когда игра на паузе или вы выходите из мира."
            },
            {
                "name": "&commat;tick",
                "description": "то же самое, что и &commat;time, но в тиках."
            },
            { "name": "&commat;unit", "description": "объект юнита." },
            {
                "name": "&commat;counter",
                "description": "строка кода, которую процессор в данный момент читает. Вы можете устанавливать ее вручную."
            },
            {
                "name": "&commat;maph",
                "description": "высота карты в тайлах."
            },
            {
                "name": "&commat;mapw",
                "description": "ширина карты в тайлах."
            },
            {
                "name": "&commat;ipt",
                "description": "скорость чтения процессора в строках за секунду."
            },
            {
                "name": "&commat;itemCount , &commat;liquidCount , &commat;unitCount , &commat;blockCount",
                "description": "отображает количество объектов определенного типа в игре (от обоих планет serpulo и erekir)."
            },
            {
                "name": "&commat;air",
                "description": "представляет собой воздух. С его помощью вы можете выкидывать ресурсы из юнита в никуда."
            },
            { "name": "&commat;server", "description": "сервер." },
            {
                "name": "&commat;crux , &commat;sharded , &commat;derelict , &commat;malis , &commat;blue , &commat;green",
                "description": "представляет объекты команд."
            },
            { "name": "&commat;pi", "description": "представляет число π." },
            { "name": "&commat;e", "description": "представляет число e." },
            {
                "name": "&commat;minute",
                "description": "время, проведенное в мире, в минутах."
            },
            { "name": "&commat;waveNumber", "description": " номер волны." },
            { "name": "&commat;waveTime", "description": "время волны." },
            {
                "name": "&commat;degToRad , &commat;radToDeg , &commat;ctrlProcessor , &commat;ctrlPlayer , &commat;ctrlCommands",
                "description": "редко используются."
            }
        ],
        "basicProcessorInfoTitle": "Основная информация о процессоре",
        "basicProcessorInfo": [
            "Вы можете изменить поведение сортировщика, отключив его. То же самое относится к инвертированному сортировщику.",
            "Uradar сканирует радары от каждого юнита того же типа.",
            "Вы можете добавлять комментарии к коду с использованием символа #, и если вы вставите код с комментариями, они исчезнут.",
            "С введением логики были добавлены временные интервалы и задержки для многих операций:",
            "Получение ресурсов и подъем юнита (2 секунды на v6, 1,5 секунды на v7);",
            "Забирание контроля у юнитов (10 секунд на v7);",
            "Включение блоков после их отключения с логикой (только на v6, 6 секунд);",
            "Взаимодействие с дверьми (1 секунда вручную, 1,33 секунды с логикой).",
            "Вы не можете управлять многими блоками, которые вы считаете управляемыми. Например, катапульты, узлы, аккумуляторы.",
            "Логика может не сработать во время перезагрузки карты. Мы не уверены, что ломается и что нет.",
            "Числа могут хранить только 52 бита информации (+1 бит знака) и представлять 53 из-за того, что есть неявная 1 перед дробной мантиссой (часть 3,1415926e+0 в числах с плавающей запятой) из-за того, как работает бинарная научная нотация. Это означает, что самое большое \"безопасное\" число - 2^53 (9,007,199,254,740,992.0 или 0x20 00 00 00 00 00 00).",
            "Ubind загружает юниты в том порядке, в котором они загружаются в Groups.unit (массив, который хранит все юниты), в цикле. Это не случайно. Однако сохраненные перезагрузки перемешивают порядок юнитов по неизвестным причинам.",
            "Принцип работы packcolor заключается в том, что он берет компоненты цвета и преобразует их в число с плавающей точкой, которое можно обработать на экране. Он будет отображаться, как будто это 0, но разделите его на 2^-1074, чтобы получить цвет.",
            "Когда код достигает последней строки, он начинает выполняться снова с первой строки (или со значения &commat;counter).",
            "У каждого типа процессора своя скорость обработки (вы можете прочитать это из &commat;ipt): микропроцессор (2 ipt или 120 строк в секунду при 60 FPS), логический процессор (480 в секунду), гиперпроцессор (1500 в секунду).",
            "Ячейка памяти может хранить ограниченное количество чисел (double или float32).",
            "Ячейка памяти хранит 64 числа, а банк памяти хранит 512 чисел.",
            "Все команды и слова чувствительны к регистру, например, '&commat;firstItem', а не '&commat;firstitem'. Большинство сравнений косвенные - 'true' и 'false' также будут равны 1 и 0 соответственно. Будьте осторожны, &commat;null также будет преобразован в 0. Чтобы избежать этого, используйте строгое сравнение с ===."
        ],
        "jumpLabelsTitle": "Использование джампов",
        "jumpLabelsIntro": "Если вы пишете код за пределами Mindustry (например, на веб-сайте или в VScode), вы можете использовать лабели (абсолютные) вместо джампов (относительных), чтобы избежать необходимости поддерживать номеры строк в джампах. Джампы:",
        "jumpMethods": "В джампах вам нужно написать номер строки, на которую вы хотите перейти. В больших кодах это может быть проблематично, и если вы удаляете или добавляете строки, вам придется изменять номера строки тоже.",
        "jumpLabelMethodsTitle": "Лабели",
        "jumpLabelMethods": "В лабелях вам просто нужно указать имя метки, за которым следует двоеточие, ('[name]:' не считается строкой). Когда вы вставляете код в игру, метка исчезнет, и джамп будет установлен соответственно.",
        "otherLogicBlocksTitle": "Другие блоки логики",
        "otherLogicBlocksIntro": "Теперь перейдем к другим блокам в логике. Как вы можете понять, кнопка может быть включена или выключена. В процессоре вы можете проверить это, используя команду сенсора и его метод &commat;enabled. С помощью дисплеев вы можете что-то рисовать. У дисплея есть свой размер в пикселях, и вы можете отображать изображения на нем, используя команды draw и drawflush."
      }
    }
  }
